// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "ciot/proto/v2/storage.proto" (package "Ciot", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Stop storage interface
 *
 * @generated from protobuf message Ciot.StorageStop
 */
export interface StorageStop {
}
/**
 * Message representing configuration for the storage module.
 *
 * @generated from protobuf message Ciot.StorageCfg
 */
export interface StorageCfg {
    /**
     * @generated from protobuf field: Ciot.StorageType type = 1
     */
    type: StorageType; // Type of storage.
}
/**
 * Message representing status for the storage module.
 *
 * @generated from protobuf message Ciot.StorageStatus
 */
export interface StorageStatus {
    /**
     * @generated from protobuf field: Ciot.StorageState state = 1
     */
    state: StorageState; // State of the storage module.
    /**
     * @generated from protobuf field: uint32 free_space = 2
     */
    freeSpace: number; // Storage module free space
}
/**
 * Message representing storage module information.
 *
 * @generated from protobuf message Ciot.StorageInfo
 */
export interface StorageInfo {
    /**
     * @generated from protobuf field: uint32 total_size = 1
     */
    totalSize: number;
}
/**
 * Message representing data for a storage request.
 *
 * @generated from protobuf message Ciot.StorageFile
 */
export interface StorageFile {
    /**
     * @generated from protobuf field: string path = 1
     */
    path: string; // Path for the storage operation.
    /**
     * @generated from protobuf field: bytes data = 2
     */
    data: Uint8Array; // Data for the storage operation.
}
/**
 * Message representing a request to delete a file.
 *
 * @generated from protobuf message Ciot.StorageReqDelete
 */
export interface StorageReqDelete {
    /**
     * @generated from protobuf field: string path = 1
     */
    path: string; // Path for the storage operation.
}
/**
 * Message representing a request to format the storage interface.
 *
 * @generated from protobuf message Ciot.StorageReqFormat
 */
export interface StorageReqFormat {
}
/**
 * Message representing a storage request.
 *
 * @generated from protobuf message Ciot.StorageReq
 */
export interface StorageReq {
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "save";
        /**
         * @generated from protobuf field: Ciot.StorageFile save = 1
         */
        save: StorageFile;
    } | {
        oneofKind: "load";
        /**
         * @generated from protobuf field: Ciot.StorageFile load = 2
         */
        load: StorageFile;
    } | {
        oneofKind: "remove";
        /**
         * @generated from protobuf field: Ciot.StorageFile remove = 3
         */
        remove: StorageFile;
    } | {
        oneofKind: "format";
        /**
         * @generated from protobuf field: Ciot.StorageReqFormat format = 4
         */
        format: StorageReqFormat;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Message representing data for the storage module.
 *
 * @generated from protobuf message Ciot.StorageData
 */
export interface StorageData {
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "stop";
        /**
         * @generated from protobuf field: Ciot.StorageStop stop = 1
         */
        stop: StorageStop; // Stop storage interface
    } | {
        oneofKind: "config";
        /**
         * @generated from protobuf field: Ciot.StorageCfg config = 2
         */
        config: StorageCfg; // Configuration for the storage module.
    } | {
        oneofKind: "status";
        /**
         * @generated from protobuf field: Ciot.StorageStatus status = 3
         */
        status: StorageStatus; // Status of the storage module.
    } | {
        oneofKind: "request";
        /**
         * @generated from protobuf field: Ciot.StorageReq request = 4
         */
        request: StorageReq; // Storage request data.
    } | {
        oneofKind: "info";
        /**
         * @generated from protobuf field: Ciot.StorageInfo info = 6
         */
        info: StorageInfo; // Storage information data.
    } | {
        oneofKind: undefined;
    };
}
/**
 * Enum representing the state of the storage module.
 *
 * @generated from protobuf enum Ciot.StorageState
 */
export enum StorageState {
    /**
     * Storage module is idle.
     *
     * @generated from protobuf enum value: STORAGE_STATE_IDLE = 0;
     */
    IDLE = 0
}
/**
 * Enum representing different types of storage.
 *
 * @generated from protobuf enum Ciot.StorageType
 */
export enum StorageType {
    /**
     * Unknown storage type.
     *
     * @generated from protobuf enum value: STORAGE_TYPE_UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * EEPROM storage type.
     *
     * @generated from protobuf enum value: STORAGE_TYPE_EEPROM = 1;
     */
    EEPROM = 1,
    /**
     * Flash storage type.
     *
     * @generated from protobuf enum value: STORAGE_TYPE_FLASH = 2;
     */
    FLASH = 2,
    /**
     * File system storage type.
     *
     * @generated from protobuf enum value: STORAGE_TYPE_FS = 3;
     */
    FS = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class StorageStop$Type extends MessageType<StorageStop> {
    constructor() {
        super("Ciot.StorageStop", []);
    }
    create(value?: PartialMessage<StorageStop>): StorageStop {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<StorageStop>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StorageStop): StorageStop {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StorageStop, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.StorageStop
 */
export const StorageStop = new StorageStop$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StorageCfg$Type extends MessageType<StorageCfg> {
    constructor() {
        super("Ciot.StorageCfg", [
            { no: 1, name: "type", kind: "enum", T: () => ["Ciot.StorageType", StorageType, "STORAGE_TYPE_"] }
        ]);
    }
    create(value?: PartialMessage<StorageCfg>): StorageCfg {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = 0;
        if (value !== undefined)
            reflectionMergePartial<StorageCfg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StorageCfg): StorageCfg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Ciot.StorageType type */ 1:
                    message.type = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StorageCfg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Ciot.StorageType type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.StorageCfg
 */
export const StorageCfg = new StorageCfg$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StorageStatus$Type extends MessageType<StorageStatus> {
    constructor() {
        super("Ciot.StorageStatus", [
            { no: 1, name: "state", kind: "enum", T: () => ["Ciot.StorageState", StorageState, "STORAGE_STATE_"] },
            { no: 2, name: "free_space", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<StorageStatus>): StorageStatus {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.state = 0;
        message.freeSpace = 0;
        if (value !== undefined)
            reflectionMergePartial<StorageStatus>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StorageStatus): StorageStatus {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Ciot.StorageState state */ 1:
                    message.state = reader.int32();
                    break;
                case /* uint32 free_space */ 2:
                    message.freeSpace = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StorageStatus, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Ciot.StorageState state = 1; */
        if (message.state !== 0)
            writer.tag(1, WireType.Varint).int32(message.state);
        /* uint32 free_space = 2; */
        if (message.freeSpace !== 0)
            writer.tag(2, WireType.Varint).uint32(message.freeSpace);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.StorageStatus
 */
export const StorageStatus = new StorageStatus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StorageInfo$Type extends MessageType<StorageInfo> {
    constructor() {
        super("Ciot.StorageInfo", [
            { no: 1, name: "total_size", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<StorageInfo>): StorageInfo {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.totalSize = 0;
        if (value !== undefined)
            reflectionMergePartial<StorageInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StorageInfo): StorageInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 total_size */ 1:
                    message.totalSize = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StorageInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 total_size = 1; */
        if (message.totalSize !== 0)
            writer.tag(1, WireType.Varint).uint32(message.totalSize);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.StorageInfo
 */
export const StorageInfo = new StorageInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StorageFile$Type extends MessageType<StorageFile> {
    constructor() {
        super("Ciot.StorageFile", [
            { no: 1, name: "path", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<StorageFile>): StorageFile {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.path = "";
        message.data = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<StorageFile>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StorageFile): StorageFile {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string path */ 1:
                    message.path = reader.string();
                    break;
                case /* bytes data */ 2:
                    message.data = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StorageFile, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string path = 1; */
        if (message.path !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.path);
        /* bytes data = 2; */
        if (message.data.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.StorageFile
 */
export const StorageFile = new StorageFile$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StorageReqDelete$Type extends MessageType<StorageReqDelete> {
    constructor() {
        super("Ciot.StorageReqDelete", [
            { no: 1, name: "path", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StorageReqDelete>): StorageReqDelete {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.path = "";
        if (value !== undefined)
            reflectionMergePartial<StorageReqDelete>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StorageReqDelete): StorageReqDelete {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string path */ 1:
                    message.path = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StorageReqDelete, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string path = 1; */
        if (message.path !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.path);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.StorageReqDelete
 */
export const StorageReqDelete = new StorageReqDelete$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StorageReqFormat$Type extends MessageType<StorageReqFormat> {
    constructor() {
        super("Ciot.StorageReqFormat", []);
    }
    create(value?: PartialMessage<StorageReqFormat>): StorageReqFormat {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<StorageReqFormat>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StorageReqFormat): StorageReqFormat {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StorageReqFormat, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.StorageReqFormat
 */
export const StorageReqFormat = new StorageReqFormat$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StorageReq$Type extends MessageType<StorageReq> {
    constructor() {
        super("Ciot.StorageReq", [
            { no: 1, name: "save", kind: "message", oneof: "type", T: () => StorageFile },
            { no: 2, name: "load", kind: "message", oneof: "type", T: () => StorageFile },
            { no: 3, name: "remove", kind: "message", oneof: "type", T: () => StorageFile },
            { no: 4, name: "format", kind: "message", oneof: "type", T: () => StorageReqFormat }
        ]);
    }
    create(value?: PartialMessage<StorageReq>): StorageReq {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<StorageReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StorageReq): StorageReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Ciot.StorageFile save */ 1:
                    message.type = {
                        oneofKind: "save",
                        save: StorageFile.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).save)
                    };
                    break;
                case /* Ciot.StorageFile load */ 2:
                    message.type = {
                        oneofKind: "load",
                        load: StorageFile.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).load)
                    };
                    break;
                case /* Ciot.StorageFile remove */ 3:
                    message.type = {
                        oneofKind: "remove",
                        remove: StorageFile.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).remove)
                    };
                    break;
                case /* Ciot.StorageReqFormat format */ 4:
                    message.type = {
                        oneofKind: "format",
                        format: StorageReqFormat.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).format)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StorageReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Ciot.StorageFile save = 1; */
        if (message.type.oneofKind === "save")
            StorageFile.internalBinaryWrite(message.type.save, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* Ciot.StorageFile load = 2; */
        if (message.type.oneofKind === "load")
            StorageFile.internalBinaryWrite(message.type.load, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* Ciot.StorageFile remove = 3; */
        if (message.type.oneofKind === "remove")
            StorageFile.internalBinaryWrite(message.type.remove, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* Ciot.StorageReqFormat format = 4; */
        if (message.type.oneofKind === "format")
            StorageReqFormat.internalBinaryWrite(message.type.format, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.StorageReq
 */
export const StorageReq = new StorageReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StorageData$Type extends MessageType<StorageData> {
    constructor() {
        super("Ciot.StorageData", [
            { no: 1, name: "stop", kind: "message", oneof: "type", T: () => StorageStop },
            { no: 2, name: "config", kind: "message", oneof: "type", T: () => StorageCfg },
            { no: 3, name: "status", kind: "message", oneof: "type", T: () => StorageStatus },
            { no: 4, name: "request", kind: "message", oneof: "type", T: () => StorageReq },
            { no: 6, name: "info", kind: "message", oneof: "type", T: () => StorageInfo }
        ]);
    }
    create(value?: PartialMessage<StorageData>): StorageData {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<StorageData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StorageData): StorageData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Ciot.StorageStop stop */ 1:
                    message.type = {
                        oneofKind: "stop",
                        stop: StorageStop.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).stop)
                    };
                    break;
                case /* Ciot.StorageCfg config */ 2:
                    message.type = {
                        oneofKind: "config",
                        config: StorageCfg.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).config)
                    };
                    break;
                case /* Ciot.StorageStatus status */ 3:
                    message.type = {
                        oneofKind: "status",
                        status: StorageStatus.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).status)
                    };
                    break;
                case /* Ciot.StorageReq request */ 4:
                    message.type = {
                        oneofKind: "request",
                        request: StorageReq.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).request)
                    };
                    break;
                case /* Ciot.StorageInfo info */ 6:
                    message.type = {
                        oneofKind: "info",
                        info: StorageInfo.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).info)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StorageData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Ciot.StorageStop stop = 1; */
        if (message.type.oneofKind === "stop")
            StorageStop.internalBinaryWrite(message.type.stop, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* Ciot.StorageCfg config = 2; */
        if (message.type.oneofKind === "config")
            StorageCfg.internalBinaryWrite(message.type.config, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* Ciot.StorageStatus status = 3; */
        if (message.type.oneofKind === "status")
            StorageStatus.internalBinaryWrite(message.type.status, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* Ciot.StorageReq request = 4; */
        if (message.type.oneofKind === "request")
            StorageReq.internalBinaryWrite(message.type.request, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* Ciot.StorageInfo info = 6; */
        if (message.type.oneofKind === "info")
            StorageInfo.internalBinaryWrite(message.type.info, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.StorageData
 */
export const StorageData = new StorageData$Type();
