// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "ciot/proto/v2/dfu.proto" (package "Ciot", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Err } from "./errors";
/**
 * Dfu stop message
 *
 * @generated from protobuf message Ciot.DfuStop
 */
export interface DfuStop {
}
/**
 * Dfu configuration
 *
 * @generated from protobuf message Ciot.DfuCfg
 */
export interface DfuCfg {
    /**
     * @generated from protobuf field: Ciot.DfuType type = 1
     */
    type: DfuType; // DFU type
}
/**
 * Dfu status
 *
 * @generated from protobuf message Ciot.DfuStatus
 */
export interface DfuStatus {
    /**
     * @generated from protobuf field: Ciot.DfuState state = 1
     */
    state: DfuState; // Dfu current state
    /**
     * @generated from protobuf field: uint32 code = 2
     */
    code: number; // Dfu response/status code
    /**
     * @generated from protobuf field: Ciot.Err error = 3
     */
    error: Err; // Dfu error code
    /**
     * @generated from protobuf field: uint32 image_size = 4
     */
    imageSize: number; // Dfu image size
    /**
     * @generated from protobuf field: uint32 image_written = 5
     */
    imageWritten: number; // Dfu image written on client
}
/**
 * Dfu request
 *
 * @generated from protobuf message Ciot.DfuReq
 */
export interface DfuReq {
}
/**
 * Dfu data
 *
 * @generated from protobuf message Ciot.DfuData
 */
export interface DfuData {
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "stop";
        /**
         * @generated from protobuf field: Ciot.DfuStop stop = 1
         */
        stop: DfuStop; // Dfu stop
    } | {
        oneofKind: "config";
        /**
         * @generated from protobuf field: Ciot.DfuCfg config = 2
         */
        config: DfuCfg; // Dfu configuration data
    } | {
        oneofKind: "status";
        /**
         * @generated from protobuf field: Ciot.DfuStatus status = 3
         */
        status: DfuStatus; // Dfu status data
    } | {
        oneofKind: "request";
        /**
         * @generated from protobuf field: Ciot.DfuReq request = 4
         */
        request: DfuReq; // Dfu request data
    } | {
        oneofKind: undefined;
    };
}
/**
 * Possible dfu states
 *
 * @generated from protobuf enum Ciot.DfuState
 */
export enum DfuState {
    /**
     * Idle state
     *
     * @generated from protobuf enum value: DFU_STATE_IDLE = 0;
     */
    IDLE = 0,
    /**
     * Dfu Starting
     *
     * @generated from protobuf enum value: DFU_STATE_STARTING = 1;
     */
    STARTING = 1,
    /**
     * Dfu Interrface started
     *
     * @generated from protobuf enum value: DFU_STATE_STARTED = 2;
     */
    STARTED = 2,
    /**
     * Dfu in progress
     *
     * @generated from protobuf enum value: DFU_STATE_IN_PROGRESS = 3;
     */
    IN_PROGRESS = 3,
    /**
     * Dfu completed
     *
     * @generated from protobuf enum value: DFU_STATE_COMPLETED = 4;
     */
    COMPLETED = 4,
    /**
     * Dfu error
     *
     * @generated from protobuf enum value: DFU_STATE_ERROR = 5;
     */
    ERROR = 5
}
/**
 * Dfu types
 *
 * @generated from protobuf enum Ciot.DfuType
 */
export enum DfuType {
    /**
     * Unknown type
     *
     * @generated from protobuf enum value: DFU_TYPE_UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * Dfu over uart
     *
     * @generated from protobuf enum value: DFU_TYPE_UART = 1;
     */
    UART = 1,
    /**
     * Dfu over USB
     *
     * @generated from protobuf enum value: DFU_TYPE_USB = 2;
     */
    USB = 2,
    /**
     * Dfu over bluetooth low energy
     *
     * @generated from protobuf enum value: DFU_TYPE_BLE = 3;
     */
    BLE = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class DfuStop$Type extends MessageType<DfuStop> {
    constructor() {
        super("Ciot.DfuStop", []);
    }
    create(value?: PartialMessage<DfuStop>): DfuStop {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DfuStop>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DfuStop): DfuStop {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DfuStop, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.DfuStop
 */
export const DfuStop = new DfuStop$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DfuCfg$Type extends MessageType<DfuCfg> {
    constructor() {
        super("Ciot.DfuCfg", [
            { no: 1, name: "type", kind: "enum", T: () => ["Ciot.DfuType", DfuType, "DFU_TYPE_"] }
        ]);
    }
    create(value?: PartialMessage<DfuCfg>): DfuCfg {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = 0;
        if (value !== undefined)
            reflectionMergePartial<DfuCfg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DfuCfg): DfuCfg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Ciot.DfuType type */ 1:
                    message.type = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DfuCfg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Ciot.DfuType type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.DfuCfg
 */
export const DfuCfg = new DfuCfg$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DfuStatus$Type extends MessageType<DfuStatus> {
    constructor() {
        super("Ciot.DfuStatus", [
            { no: 1, name: "state", kind: "enum", T: () => ["Ciot.DfuState", DfuState, "DFU_STATE_"] },
            { no: 2, name: "code", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "error", kind: "enum", T: () => ["Ciot.Err", Err, "ERR_"] },
            { no: 4, name: "image_size", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "image_written", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DfuStatus>): DfuStatus {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.state = 0;
        message.code = 0;
        message.error = 0;
        message.imageSize = 0;
        message.imageWritten = 0;
        if (value !== undefined)
            reflectionMergePartial<DfuStatus>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DfuStatus): DfuStatus {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Ciot.DfuState state */ 1:
                    message.state = reader.int32();
                    break;
                case /* uint32 code */ 2:
                    message.code = reader.uint32();
                    break;
                case /* Ciot.Err error */ 3:
                    message.error = reader.int32();
                    break;
                case /* uint32 image_size */ 4:
                    message.imageSize = reader.uint32();
                    break;
                case /* uint32 image_written */ 5:
                    message.imageWritten = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DfuStatus, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Ciot.DfuState state = 1; */
        if (message.state !== 0)
            writer.tag(1, WireType.Varint).int32(message.state);
        /* uint32 code = 2; */
        if (message.code !== 0)
            writer.tag(2, WireType.Varint).uint32(message.code);
        /* Ciot.Err error = 3; */
        if (message.error !== 0)
            writer.tag(3, WireType.Varint).int32(message.error);
        /* uint32 image_size = 4; */
        if (message.imageSize !== 0)
            writer.tag(4, WireType.Varint).uint32(message.imageSize);
        /* uint32 image_written = 5; */
        if (message.imageWritten !== 0)
            writer.tag(5, WireType.Varint).uint32(message.imageWritten);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.DfuStatus
 */
export const DfuStatus = new DfuStatus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DfuReq$Type extends MessageType<DfuReq> {
    constructor() {
        super("Ciot.DfuReq", []);
    }
    create(value?: PartialMessage<DfuReq>): DfuReq {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DfuReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DfuReq): DfuReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DfuReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.DfuReq
 */
export const DfuReq = new DfuReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DfuData$Type extends MessageType<DfuData> {
    constructor() {
        super("Ciot.DfuData", [
            { no: 1, name: "stop", kind: "message", oneof: "type", T: () => DfuStop },
            { no: 2, name: "config", kind: "message", oneof: "type", T: () => DfuCfg },
            { no: 3, name: "status", kind: "message", oneof: "type", T: () => DfuStatus },
            { no: 4, name: "request", kind: "message", oneof: "type", T: () => DfuReq }
        ]);
    }
    create(value?: PartialMessage<DfuData>): DfuData {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<DfuData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DfuData): DfuData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Ciot.DfuStop stop */ 1:
                    message.type = {
                        oneofKind: "stop",
                        stop: DfuStop.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).stop)
                    };
                    break;
                case /* Ciot.DfuCfg config */ 2:
                    message.type = {
                        oneofKind: "config",
                        config: DfuCfg.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).config)
                    };
                    break;
                case /* Ciot.DfuStatus status */ 3:
                    message.type = {
                        oneofKind: "status",
                        status: DfuStatus.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).status)
                    };
                    break;
                case /* Ciot.DfuReq request */ 4:
                    message.type = {
                        oneofKind: "request",
                        request: DfuReq.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).request)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DfuData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Ciot.DfuStop stop = 1; */
        if (message.type.oneofKind === "stop")
            DfuStop.internalBinaryWrite(message.type.stop, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* Ciot.DfuCfg config = 2; */
        if (message.type.oneofKind === "config")
            DfuCfg.internalBinaryWrite(message.type.config, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* Ciot.DfuStatus status = 3; */
        if (message.type.oneofKind === "status")
            DfuStatus.internalBinaryWrite(message.type.status, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* Ciot.DfuReq request = 4; */
        if (message.type.oneofKind === "request")
            DfuReq.internalBinaryWrite(message.type.request, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.DfuData
 */
export const DfuData = new DfuData$Type();
