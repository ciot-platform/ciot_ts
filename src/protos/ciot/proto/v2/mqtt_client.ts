// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "ciot/proto/v2/mqtt_client.proto" (package "Ciot", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Message representing error details for the MQTT client.
 *
 * @generated from protobuf message Ciot.MqttClientError
 */
export interface MqttClientError {
    /**
     * @generated from protobuf field: uint32 tls_last_err = 1
     */
    tlsLastErr: number; // TLS last error code.
    /**
     * @generated from protobuf field: uint32 tls_stack_err = 2
     */
    tlsStackErr: number; // TLS stack error code.
    /**
     * @generated from protobuf field: uint32 tls_cert_verify_flags = 3
     */
    tlsCertVerifyFlags: number; // TLS certificate verification flags.
    /**
     * @generated from protobuf field: uint32 type = 4
     */
    type: number; // Type of the error.
    /**
     * @generated from protobuf field: uint32 code = 5
     */
    code: number; // Error code.
    /**
     * @generated from protobuf field: uint32 transport_sock = 6
     */
    transportSock: number; // Transport socket error.
}
/**
 * Message representing configuration for MQTT client topics.
 *
 * @generated from protobuf message Ciot.MqttClientTopicsCfg
 */
export interface MqttClientTopicsCfg {
    /**
     * @generated from protobuf field: string pub = 1
     */
    pub: string; // Topic used to publish data
    /**
     * @generated from protobuf field: string sub = 2
     */
    sub: string; // Topic used to receive data.
}
/**
 * Message used to stop MQTT client interface
 *
 * @generated from protobuf message Ciot.MqttClientStop
 */
export interface MqttClientStop {
}
/**
 * Message representing configuration for the MQTT client.
 *
 * @generated from protobuf message Ciot.MqttClientCfg
 */
export interface MqttClientCfg {
    /**
     * @generated from protobuf field: string client_id = 1
     */
    clientId: string; // Client ID for MQTT connection.
    /**
     * @generated from protobuf field: string url = 2
     */
    url: string; // URL for MQTT connection.
    /**
     * @generated from protobuf field: string user = 3
     */
    user: string; // Username for MQTT authentication.
    /**
     * @generated from protobuf field: string password = 4
     */
    password: string; // Password for MQTT authentication.
    /**
     * @generated from protobuf field: uint32 qos = 5
     */
    qos: number; // Quality of Service level for MQTT communication.
    /**
     * @generated from protobuf field: Ciot.MqttClientTopicsCfg topics = 6
     */
    topics?: MqttClientTopicsCfg; // Topics configuration for MQTT communication.
    /**
     * @generated from protobuf field: Ciot.MqttClientBrokerKind broker_kind = 7
     */
    brokerKind: MqttClientBrokerKind; // MQTT broker kind
}
/**
 * Message representing status information for the MQTT client.
 *
 * @generated from protobuf message Ciot.MqttClientStatus
 */
export interface MqttClientStatus {
    /**
     * @generated from protobuf field: Ciot.MqttClientState state = 1
     */
    state: MqttClientState; // State of the MQTT client.
    /**
     * @generated from protobuf field: uint32 conn_count = 2
     */
    connCount: number; // Connection count.
    /**
     * @generated from protobuf field: uint32 data_rate = 3
     */
    dataRate: number; // Data rate.
    /**
     * @generated from protobuf field: uint64 last_msg_time = 4
     */
    lastMsgTime: bigint; // Timestamp of the last message.
    /**
     * @generated from protobuf field: Ciot.MqttClientError error = 5
     */
    error?: MqttClientError; // Error details for the MQTT client.
}
/**
 * Message representing a publish request for the MQTT client.
 *
 * @generated from protobuf message Ciot.MqttClientReqPublish
 */
export interface MqttClientReqPublish {
    /**
     * @generated from protobuf field: string topic = 1
     */
    topic: string; // Topic for publishing.
    /**
     * @generated from protobuf field: bytes payload = 2
     */
    payload: Uint8Array; // Message payload.
    /**
     * @generated from protobuf field: uint32 qos = 3
     */
    qos: number; // Quality of Service level for the publish request.
}
/**
 * Message representing a subscribe request for the MQTT client.
 *
 * @generated from protobuf message Ciot.MqttClientReqSubscribe
 */
export interface MqttClientReqSubscribe {
    /**
     * @generated from protobuf field: string topic = 1
     */
    topic: string; // Topic to subscribe to.
    /**
     * @generated from protobuf field: uint32 qos = 2
     */
    qos: number; // Quality of Service level for the subscribe request.
}
/**
 * Message representing a request for the MQTT client.
 *
 * @generated from protobuf message Ciot.MqttClientReq
 */
export interface MqttClientReq {
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "publish";
        /**
         * @generated from protobuf field: Ciot.MqttClientReqPublish publish = 1
         */
        publish: MqttClientReqPublish; // Publish request.
    } | {
        oneofKind: "subscribe";
        /**
         * @generated from protobuf field: Ciot.MqttClientReqSubscribe subscribe = 2
         */
        subscribe: MqttClientReqSubscribe; // Subscribe request.
    } | {
        oneofKind: undefined;
    };
}
/**
 * Message representing data for the MQTT client.
 *
 * @generated from protobuf message Ciot.MqttClientData
 */
export interface MqttClientData {
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "stop";
        /**
         * @generated from protobuf field: Ciot.MqttClientStop stop = 1
         */
        stop: MqttClientStop; // Stop MQTT client.
    } | {
        oneofKind: "config";
        /**
         * @generated from protobuf field: Ciot.MqttClientCfg config = 2
         */
        config: MqttClientCfg; // Configuration for the MQTT client.
    } | {
        oneofKind: "status";
        /**
         * @generated from protobuf field: Ciot.MqttClientStatus status = 3
         */
        status: MqttClientStatus; // Status of the MQTT client.
    } | {
        oneofKind: "request";
        /**
         * @generated from protobuf field: Ciot.MqttClientReq request = 4
         */
        request: MqttClientReq; // MQTT client request data.
    } | {
        oneofKind: undefined;
    };
}
/**
 * Enum representing the state of the MQTT client.
 *
 * @generated from protobuf enum Ciot.MqttClientState
 */
export enum MqttClientState {
    /**
     * The MQTT client is disconnected.
     *
     * @generated from protobuf enum value: MQTT_CLIENT_STATE_DISCONNECTED = 0;
     */
    DISCONNECTED = 0,
    /**
     * The MQTT client is connecting.
     *
     * @generated from protobuf enum value: MQTT_CLIENT_STATE_CONNECTING = 1;
     */
    CONNECTING = 1,
    /**
     * The MQTT client is disconnecting.
     *
     * @generated from protobuf enum value: MQTT_CLIENT_STATE_DISCONNECTING = 2;
     */
    DISCONNECTING = 2,
    /**
     * The MQTT client is connected.
     *
     * @generated from protobuf enum value: MQTT_CLIENT_STATE_CONNECTED = 3;
     */
    CONNECTED = 3,
    /**
     * The MQTT client encountered an error.
     *
     * @generated from protobuf enum value: MQTT_CLIENT_STATE_ERROR = 4;
     */
    ERROR = 4
}
/**
 * Enum representing different types of MQTT client requests.
 *
 * @generated from protobuf enum Ciot.MqttClientReqType
 */
export enum MqttClientReqType {
    /**
     * Unknown MQTT request type.
     *
     * @generated from protobuf enum value: MQTT_CLIENT_REQ_TYPE_UNKOWN = 0;
     */
    UNKOWN = 0,
    /**
     * MQTT publish request.
     *
     * @generated from protobuf enum value: MQTT_CLIENT_REQ_TYPE_PUBLISH = 1;
     */
    PUBLISH = 1,
    /**
     * MQTT subscribe request.
     *
     * @generated from protobuf enum value: MQTT_CLIENT_REQ_TYPE_SUBSCRIBE = 2;
     */
    SUBSCRIBE = 2
}
/**
 * Enum representing different MQTT Broker kinds
 *
 * @generated from protobuf enum Ciot.MqttClientBrokerKind
 */
export enum MqttClientBrokerKind {
    /**
     * Default used in common mqtt connections
     *
     * @generated from protobuf enum value: MQTT_CLIENT_BROKER_KIND_DEFAULT = 0;
     */
    DEFAULT = 0,
    /**
     * SSL v1.2 required
     *
     * @generated from protobuf enum value: MQTT_CLIENT_BROKER_KIND_SSL_1_2 = 1;
     */
    SSL_1_2 = 1,
    /**
     * SSL v1.3 required
     *
     * @generated from protobuf enum value: MQTT_CLIENT_BROKER_KIND_SSL_1_3 = 2;
     */
    SSL_1_3 = 2,
    /**
     * AWS authentication required
     *
     * @generated from protobuf enum value: MQTT_CLIENT_BROKER_KIND_AWS = 3;
     */
    AWS = 3,
    /**
     * AZURE authentication required
     *
     * @generated from protobuf enum value: MQTT_CLIENT_BROKER_KIND_AZURE = 4;
     */
    AZURE = 4
}
// @generated message type with reflection information, may provide speed optimized methods
class MqttClientError$Type extends MessageType<MqttClientError> {
    constructor() {
        super("Ciot.MqttClientError", [
            { no: 1, name: "tls_last_err", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "tls_stack_err", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "tls_cert_verify_flags", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "type", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "code", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "transport_sock", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MqttClientError>): MqttClientError {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tlsLastErr = 0;
        message.tlsStackErr = 0;
        message.tlsCertVerifyFlags = 0;
        message.type = 0;
        message.code = 0;
        message.transportSock = 0;
        if (value !== undefined)
            reflectionMergePartial<MqttClientError>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MqttClientError): MqttClientError {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 tls_last_err */ 1:
                    message.tlsLastErr = reader.uint32();
                    break;
                case /* uint32 tls_stack_err */ 2:
                    message.tlsStackErr = reader.uint32();
                    break;
                case /* uint32 tls_cert_verify_flags */ 3:
                    message.tlsCertVerifyFlags = reader.uint32();
                    break;
                case /* uint32 type */ 4:
                    message.type = reader.uint32();
                    break;
                case /* uint32 code */ 5:
                    message.code = reader.uint32();
                    break;
                case /* uint32 transport_sock */ 6:
                    message.transportSock = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MqttClientError, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 tls_last_err = 1; */
        if (message.tlsLastErr !== 0)
            writer.tag(1, WireType.Varint).uint32(message.tlsLastErr);
        /* uint32 tls_stack_err = 2; */
        if (message.tlsStackErr !== 0)
            writer.tag(2, WireType.Varint).uint32(message.tlsStackErr);
        /* uint32 tls_cert_verify_flags = 3; */
        if (message.tlsCertVerifyFlags !== 0)
            writer.tag(3, WireType.Varint).uint32(message.tlsCertVerifyFlags);
        /* uint32 type = 4; */
        if (message.type !== 0)
            writer.tag(4, WireType.Varint).uint32(message.type);
        /* uint32 code = 5; */
        if (message.code !== 0)
            writer.tag(5, WireType.Varint).uint32(message.code);
        /* uint32 transport_sock = 6; */
        if (message.transportSock !== 0)
            writer.tag(6, WireType.Varint).uint32(message.transportSock);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.MqttClientError
 */
export const MqttClientError = new MqttClientError$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MqttClientTopicsCfg$Type extends MessageType<MqttClientTopicsCfg> {
    constructor() {
        super("Ciot.MqttClientTopicsCfg", [
            { no: 1, name: "pub", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "sub", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MqttClientTopicsCfg>): MqttClientTopicsCfg {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pub = "";
        message.sub = "";
        if (value !== undefined)
            reflectionMergePartial<MqttClientTopicsCfg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MqttClientTopicsCfg): MqttClientTopicsCfg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string pub */ 1:
                    message.pub = reader.string();
                    break;
                case /* string sub */ 2:
                    message.sub = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MqttClientTopicsCfg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string pub = 1; */
        if (message.pub !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.pub);
        /* string sub = 2; */
        if (message.sub !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.sub);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.MqttClientTopicsCfg
 */
export const MqttClientTopicsCfg = new MqttClientTopicsCfg$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MqttClientStop$Type extends MessageType<MqttClientStop> {
    constructor() {
        super("Ciot.MqttClientStop", []);
    }
    create(value?: PartialMessage<MqttClientStop>): MqttClientStop {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<MqttClientStop>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MqttClientStop): MqttClientStop {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MqttClientStop, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.MqttClientStop
 */
export const MqttClientStop = new MqttClientStop$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MqttClientCfg$Type extends MessageType<MqttClientCfg> {
    constructor() {
        super("Ciot.MqttClientCfg", [
            { no: 1, name: "client_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "user", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "qos", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "topics", kind: "message", T: () => MqttClientTopicsCfg },
            { no: 7, name: "broker_kind", kind: "enum", T: () => ["Ciot.MqttClientBrokerKind", MqttClientBrokerKind, "MQTT_CLIENT_BROKER_KIND_"] }
        ]);
    }
    create(value?: PartialMessage<MqttClientCfg>): MqttClientCfg {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.clientId = "";
        message.url = "";
        message.user = "";
        message.password = "";
        message.qos = 0;
        message.brokerKind = 0;
        if (value !== undefined)
            reflectionMergePartial<MqttClientCfg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MqttClientCfg): MqttClientCfg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string client_id */ 1:
                    message.clientId = reader.string();
                    break;
                case /* string url */ 2:
                    message.url = reader.string();
                    break;
                case /* string user */ 3:
                    message.user = reader.string();
                    break;
                case /* string password */ 4:
                    message.password = reader.string();
                    break;
                case /* uint32 qos */ 5:
                    message.qos = reader.uint32();
                    break;
                case /* Ciot.MqttClientTopicsCfg topics */ 6:
                    message.topics = MqttClientTopicsCfg.internalBinaryRead(reader, reader.uint32(), options, message.topics);
                    break;
                case /* Ciot.MqttClientBrokerKind broker_kind */ 7:
                    message.brokerKind = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MqttClientCfg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string client_id = 1; */
        if (message.clientId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.clientId);
        /* string url = 2; */
        if (message.url !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.url);
        /* string user = 3; */
        if (message.user !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.user);
        /* string password = 4; */
        if (message.password !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.password);
        /* uint32 qos = 5; */
        if (message.qos !== 0)
            writer.tag(5, WireType.Varint).uint32(message.qos);
        /* Ciot.MqttClientTopicsCfg topics = 6; */
        if (message.topics)
            MqttClientTopicsCfg.internalBinaryWrite(message.topics, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* Ciot.MqttClientBrokerKind broker_kind = 7; */
        if (message.brokerKind !== 0)
            writer.tag(7, WireType.Varint).int32(message.brokerKind);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.MqttClientCfg
 */
export const MqttClientCfg = new MqttClientCfg$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MqttClientStatus$Type extends MessageType<MqttClientStatus> {
    constructor() {
        super("Ciot.MqttClientStatus", [
            { no: 1, name: "state", kind: "enum", T: () => ["Ciot.MqttClientState", MqttClientState, "MQTT_CLIENT_STATE_"] },
            { no: 2, name: "conn_count", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "data_rate", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "last_msg_time", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "error", kind: "message", T: () => MqttClientError }
        ]);
    }
    create(value?: PartialMessage<MqttClientStatus>): MqttClientStatus {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.state = 0;
        message.connCount = 0;
        message.dataRate = 0;
        message.lastMsgTime = 0n;
        if (value !== undefined)
            reflectionMergePartial<MqttClientStatus>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MqttClientStatus): MqttClientStatus {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Ciot.MqttClientState state */ 1:
                    message.state = reader.int32();
                    break;
                case /* uint32 conn_count */ 2:
                    message.connCount = reader.uint32();
                    break;
                case /* uint32 data_rate */ 3:
                    message.dataRate = reader.uint32();
                    break;
                case /* uint64 last_msg_time */ 4:
                    message.lastMsgTime = reader.uint64().toBigInt();
                    break;
                case /* Ciot.MqttClientError error */ 5:
                    message.error = MqttClientError.internalBinaryRead(reader, reader.uint32(), options, message.error);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MqttClientStatus, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Ciot.MqttClientState state = 1; */
        if (message.state !== 0)
            writer.tag(1, WireType.Varint).int32(message.state);
        /* uint32 conn_count = 2; */
        if (message.connCount !== 0)
            writer.tag(2, WireType.Varint).uint32(message.connCount);
        /* uint32 data_rate = 3; */
        if (message.dataRate !== 0)
            writer.tag(3, WireType.Varint).uint32(message.dataRate);
        /* uint64 last_msg_time = 4; */
        if (message.lastMsgTime !== 0n)
            writer.tag(4, WireType.Varint).uint64(message.lastMsgTime);
        /* Ciot.MqttClientError error = 5; */
        if (message.error)
            MqttClientError.internalBinaryWrite(message.error, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.MqttClientStatus
 */
export const MqttClientStatus = new MqttClientStatus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MqttClientReqPublish$Type extends MessageType<MqttClientReqPublish> {
    constructor() {
        super("Ciot.MqttClientReqPublish", [
            { no: 1, name: "topic", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "payload", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "qos", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MqttClientReqPublish>): MqttClientReqPublish {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.topic = "";
        message.payload = new Uint8Array(0);
        message.qos = 0;
        if (value !== undefined)
            reflectionMergePartial<MqttClientReqPublish>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MqttClientReqPublish): MqttClientReqPublish {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string topic */ 1:
                    message.topic = reader.string();
                    break;
                case /* bytes payload */ 2:
                    message.payload = reader.bytes();
                    break;
                case /* uint32 qos */ 3:
                    message.qos = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MqttClientReqPublish, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string topic = 1; */
        if (message.topic !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.topic);
        /* bytes payload = 2; */
        if (message.payload.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.payload);
        /* uint32 qos = 3; */
        if (message.qos !== 0)
            writer.tag(3, WireType.Varint).uint32(message.qos);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.MqttClientReqPublish
 */
export const MqttClientReqPublish = new MqttClientReqPublish$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MqttClientReqSubscribe$Type extends MessageType<MqttClientReqSubscribe> {
    constructor() {
        super("Ciot.MqttClientReqSubscribe", [
            { no: 1, name: "topic", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "qos", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MqttClientReqSubscribe>): MqttClientReqSubscribe {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.topic = "";
        message.qos = 0;
        if (value !== undefined)
            reflectionMergePartial<MqttClientReqSubscribe>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MqttClientReqSubscribe): MqttClientReqSubscribe {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string topic */ 1:
                    message.topic = reader.string();
                    break;
                case /* uint32 qos */ 2:
                    message.qos = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MqttClientReqSubscribe, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string topic = 1; */
        if (message.topic !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.topic);
        /* uint32 qos = 2; */
        if (message.qos !== 0)
            writer.tag(2, WireType.Varint).uint32(message.qos);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.MqttClientReqSubscribe
 */
export const MqttClientReqSubscribe = new MqttClientReqSubscribe$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MqttClientReq$Type extends MessageType<MqttClientReq> {
    constructor() {
        super("Ciot.MqttClientReq", [
            { no: 1, name: "publish", kind: "message", oneof: "type", T: () => MqttClientReqPublish },
            { no: 2, name: "subscribe", kind: "message", oneof: "type", T: () => MqttClientReqSubscribe }
        ]);
    }
    create(value?: PartialMessage<MqttClientReq>): MqttClientReq {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<MqttClientReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MqttClientReq): MqttClientReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Ciot.MqttClientReqPublish publish */ 1:
                    message.type = {
                        oneofKind: "publish",
                        publish: MqttClientReqPublish.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).publish)
                    };
                    break;
                case /* Ciot.MqttClientReqSubscribe subscribe */ 2:
                    message.type = {
                        oneofKind: "subscribe",
                        subscribe: MqttClientReqSubscribe.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).subscribe)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MqttClientReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Ciot.MqttClientReqPublish publish = 1; */
        if (message.type.oneofKind === "publish")
            MqttClientReqPublish.internalBinaryWrite(message.type.publish, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* Ciot.MqttClientReqSubscribe subscribe = 2; */
        if (message.type.oneofKind === "subscribe")
            MqttClientReqSubscribe.internalBinaryWrite(message.type.subscribe, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.MqttClientReq
 */
export const MqttClientReq = new MqttClientReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MqttClientData$Type extends MessageType<MqttClientData> {
    constructor() {
        super("Ciot.MqttClientData", [
            { no: 1, name: "stop", kind: "message", oneof: "type", T: () => MqttClientStop },
            { no: 2, name: "config", kind: "message", oneof: "type", T: () => MqttClientCfg },
            { no: 3, name: "status", kind: "message", oneof: "type", T: () => MqttClientStatus },
            { no: 4, name: "request", kind: "message", oneof: "type", T: () => MqttClientReq }
        ]);
    }
    create(value?: PartialMessage<MqttClientData>): MqttClientData {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<MqttClientData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MqttClientData): MqttClientData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Ciot.MqttClientStop stop */ 1:
                    message.type = {
                        oneofKind: "stop",
                        stop: MqttClientStop.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).stop)
                    };
                    break;
                case /* Ciot.MqttClientCfg config */ 2:
                    message.type = {
                        oneofKind: "config",
                        config: MqttClientCfg.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).config)
                    };
                    break;
                case /* Ciot.MqttClientStatus status */ 3:
                    message.type = {
                        oneofKind: "status",
                        status: MqttClientStatus.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).status)
                    };
                    break;
                case /* Ciot.MqttClientReq request */ 4:
                    message.type = {
                        oneofKind: "request",
                        request: MqttClientReq.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).request)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MqttClientData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Ciot.MqttClientStop stop = 1; */
        if (message.type.oneofKind === "stop")
            MqttClientStop.internalBinaryWrite(message.type.stop, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* Ciot.MqttClientCfg config = 2; */
        if (message.type.oneofKind === "config")
            MqttClientCfg.internalBinaryWrite(message.type.config, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* Ciot.MqttClientStatus status = 3; */
        if (message.type.oneofKind === "status")
            MqttClientStatus.internalBinaryWrite(message.type.status, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* Ciot.MqttClientReq request = 4; */
        if (message.type.oneofKind === "request")
            MqttClientReq.internalBinaryWrite(message.type.request, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.MqttClientData
 */
export const MqttClientData = new MqttClientData$Type();
