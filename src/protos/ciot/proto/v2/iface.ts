// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "ciot/proto/v2/iface.proto" (package "Ciot", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Message representing a request to get data.
 *
 * @generated from protobuf message Ciot.GetData
 */
export interface GetData {
    /**
     * @generated from protobuf field: Ciot.DataType type = 1
     */
    type: DataType; // Data type of the request.
}
/**
 * Message representing common data.
 *
 * @generated from protobuf message Ciot.Common
 */
export interface Common {
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "stop";
        /**
         * @generated from protobuf field: bool stop = 1
         */
        stop: boolean; // Stop request.
    } | {
        oneofKind: undefined;
    };
}
/**
 * Message representing information about an interface.
 *
 * @generated from protobuf message Ciot.IfaceInfo
 */
export interface IfaceInfo {
    /**
     * @generated from protobuf field: uint32 id = 1
     */
    id: number; // Interface ID.
    /**
     * @generated from protobuf field: Ciot.IfaceType type = 2
     */
    type: IfaceType; // Interface type.
}
/**
 * Message representing interface request status.enum
 *
 * @generated from protobuf message Ciot.IfaceReqStatus
 */
export interface IfaceReqStatus {
    /**
     * @generated from protobuf field: uint32 id = 1
     */
    id: number; // Request message ID
    /**
     * @generated from protobuf field: Ciot.IfaceReqState state = 2
     */
    state: IfaceReqState; // Request state
    /**
     * @generated from protobuf field: uint32 data_type = 3
     */
    dataType: number; // Request message data type
    /**
     * @generated from protobuf field: Ciot.IfaceInfo iface = 4
     */
    iface?: IfaceInfo; // Interface information
}
/**
 * @generated from protobuf enum Ciot.IfaceState
 */
export enum IfaceState {
    /**
     * @generated from protobuf enum value: IFACE_STATE_STOPPED = 0;
     */
    STOPPED = 0,
    /**
     * @generated from protobuf enum value: IFACE_STATE_STARTED = 1;
     */
    STARTED = 1,
    /**
     * @generated from protobuf enum value: IFACE_STATE_ERROR = 2;
     */
    ERROR = 2
}
/**
 * Enum representing different interface types.
 *
 * @generated from protobuf enum Ciot.IfaceType
 */
export enum IfaceType {
    /**
     * Undefined interface type.
     *
     * @generated from protobuf enum value: IFACE_TYPE_UNDEFINED = 0;
     */
    UNDEFINED = 0,
    /**
     * Custom interface type.
     *
     * @generated from protobuf enum value: IFACE_TYPE_CUSTOM = 1;
     */
    CUSTOM = 1,
    /**
     * CIOT interface type.
     *
     * @generated from protobuf enum value: IFACE_TYPE_CIOT = 2;
     */
    CIOT = 2,
    /**
     * Storage interface type.
     *
     * @generated from protobuf enum value: IFACE_TYPE_STORAGE = 3;
     */
    STORAGE = 3,
    /**
     * System interface type.
     *
     * @generated from protobuf enum value: IFACE_TYPE_SYS = 4;
     */
    SYS = 4,
    /**
     * UART interface type.
     *
     * @generated from protobuf enum value: IFACE_TYPE_UART = 5;
     */
    UART = 5,
    /**
     * USB interface type.
     *
     * @generated from protobuf enum value: IFACE_TYPE_USB = 6;
     */
    USB = 6,
    /**
     * TCP interface type.
     *
     * @generated from protobuf enum value: IFACE_TYPE_TCP = 7;
     */
    TCP = 7,
    /**
     * Ethernet interface type.
     *
     * @generated from protobuf enum value: IFACE_TYPE_ETH = 8;
     */
    ETH = 8,
    /**
     * WiFi interface type.
     *
     * @generated from protobuf enum value: IFACE_TYPE_WIFI = 9;
     */
    WIFI = 9,
    /**
     * BLE interface type.
     *
     * @generated from protobuf enum value: IFACE_TYPE_BLE = 10;
     */
    BLE = 10,
    /**
     * BLE SCN interface type.
     *
     * @generated from protobuf enum value: IFACE_TYPE_BLE_SCN = 11;
     */
    BLE_SCN = 11,
    /**
     * BLE ADV interface type.
     *
     * @generated from protobuf enum value: IFACE_TYPE_BLE_ADV = 12;
     */
    BLE_ADV = 12,
    /**
     * GPIO interface type.
     *
     * @generated from protobuf enum value: IFACE_TYPE_GPIO = 13;
     */
    GPIO = 13,
    /**
     * NTP interface type.
     *
     * @generated from protobuf enum value: IFACE_TYPE_NTP = 14;
     */
    NTP = 14,
    /**
     * OTA interface type.
     *
     * @generated from protobuf enum value: IFACE_TYPE_OTA = 15;
     */
    OTA = 15,
    /**
     * DFU interface type.
     *
     * @generated from protobuf enum value: IFACE_TYPE_DFU = 16;
     */
    DFU = 16,
    /**
     * HTTP Client interface type.
     *
     * @generated from protobuf enum value: IFACE_TYPE_HTTP_CLIENT = 17;
     */
    HTTP_CLIENT = 17,
    /**
     * HTTP Server interface type.
     *
     * @generated from protobuf enum value: IFACE_TYPE_HTTP_SERVER = 18;
     */
    HTTP_SERVER = 18,
    /**
     * MQTT interface type.
     *
     * @generated from protobuf enum value: IFACE_TYPE_MQTT_CLIENT = 19;
     */
    MQTT_CLIENT = 19,
    /**
     * Socket interface type.
     *
     * @generated from protobuf enum value: IFACE_TYPE_SOCKET = 20;
     */
    SOCKET = 20,
    /**
     * Bridge interface type.
     *
     * @generated from protobuf enum value: IFACE_TYPE_BRIDGE = 21;
     */
    BRIDGE = 21,
    /**
     * IOTA client interface type.
     *
     * @generated from protobuf enum value: IFACE_TYPE_IOTA_CLIENT = 22;
     */
    IOTA_CLIENT = 22,
    /**
     * IOTA server interface type.
     *
     * @generated from protobuf enum value: IFACE_TYPE_IOTA_SERVER = 23;
     */
    IOTA_SERVER = 23,
    /**
     * LOG interface type.
     *
     * @generated from protobuf enum value: IFACE_TYPE_LOG = 24;
     */
    LOG = 24,
    /**
     * Modbus client interface type.
     *
     * @generated from protobuf enum value: IFACE_TYPE_MBUS_CLIENT = 25;
     */
    MBUS_CLIENT = 25,
    /**
     * Modbus server interface type.
     *
     * @generated from protobuf enum value: IFACE_TYPE_MBUS_SERVER = 26;
     */
    MBUS_SERVER = 26,
    /**
     * PWM interface type.
     *
     * @generated from protobuf enum value: IFACE_TYPE_PWM = 27;
     */
    PWM = 27
}
/**
 * Enum representing different states of the interface request.
 *
 * @generated from protobuf enum Ciot.IfaceReqState
 */
export enum IfaceReqState {
    /**
     * Idle. No request sended or received.
     *
     * @generated from protobuf enum value: IFACE_REQ_STATE_IDLE = 0;
     */
    IDLE = 0,
    /**
     * Request sended
     *
     * @generated from protobuf enum value: IFACE_REQ_STATE_SENDED = 1;
     */
    SENDED = 1,
    /**
     * Request received
     *
     * @generated from protobuf enum value: IFACE_REQ_STATE_RECEIVED = 3;
     */
    RECEIVED = 3
}
/**
 * Enum representing different data types for the interface request.
 *
 * @generated from protobuf enum Ciot.DataType
 */
export enum DataType {
    /**
     * Unknown data type.
     *
     * @generated from protobuf enum value: DATA_TYPE_UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * Stop data type.
     *
     * @generated from protobuf enum value: DATA_TYPE_STOP = 1;
     */
    STOP = 1,
    /**
     * Configuration data type.
     *
     * @generated from protobuf enum value: DATA_TYPE_CONFIG = 2;
     */
    CONFIG = 2,
    /**
     * Status data type.
     *
     * @generated from protobuf enum value: DATA_TYPE_STATUS = 3;
     */
    STATUS = 3,
    /**
     * Request data type.
     *
     * @generated from protobuf enum value: DATA_TYPE_REQUEST = 4;
     */
    REQUEST = 4,
    /**
     * Information data type.
     *
     * @generated from protobuf enum value: DATA_TYPE_INFO = 5;
     */
    INFO = 5
}
// @generated message type with reflection information, may provide speed optimized methods
class GetData$Type extends MessageType<GetData> {
    constructor() {
        super("Ciot.GetData", [
            { no: 1, name: "type", kind: "enum", T: () => ["Ciot.DataType", DataType, "DATA_TYPE_"] }
        ]);
    }
    create(value?: PartialMessage<GetData>): GetData {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = 0;
        if (value !== undefined)
            reflectionMergePartial<GetData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetData): GetData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Ciot.DataType type */ 1:
                    message.type = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Ciot.DataType type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.GetData
 */
export const GetData = new GetData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Common$Type extends MessageType<Common> {
    constructor() {
        super("Ciot.Common", [
            { no: 1, name: "stop", kind: "scalar", oneof: "type", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<Common>): Common {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<Common>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Common): Common {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool stop */ 1:
                    message.type = {
                        oneofKind: "stop",
                        stop: reader.bool()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Common, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool stop = 1; */
        if (message.type.oneofKind === "stop")
            writer.tag(1, WireType.Varint).bool(message.type.stop);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.Common
 */
export const Common = new Common$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IfaceInfo$Type extends MessageType<IfaceInfo> {
    constructor() {
        super("Ciot.IfaceInfo", [
            { no: 1, name: "id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "type", kind: "enum", T: () => ["Ciot.IfaceType", IfaceType, "IFACE_TYPE_"] }
        ]);
    }
    create(value?: PartialMessage<IfaceInfo>): IfaceInfo {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.type = 0;
        if (value !== undefined)
            reflectionMergePartial<IfaceInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IfaceInfo): IfaceInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                case /* Ciot.IfaceType type */ 2:
                    message.type = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IfaceInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint32(message.id);
        /* Ciot.IfaceType type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int32(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.IfaceInfo
 */
export const IfaceInfo = new IfaceInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IfaceReqStatus$Type extends MessageType<IfaceReqStatus> {
    constructor() {
        super("Ciot.IfaceReqStatus", [
            { no: 1, name: "id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "state", kind: "enum", T: () => ["Ciot.IfaceReqState", IfaceReqState, "IFACE_REQ_STATE_"] },
            { no: 3, name: "data_type", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "iface", kind: "message", T: () => IfaceInfo }
        ]);
    }
    create(value?: PartialMessage<IfaceReqStatus>): IfaceReqStatus {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.state = 0;
        message.dataType = 0;
        if (value !== undefined)
            reflectionMergePartial<IfaceReqStatus>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IfaceReqStatus): IfaceReqStatus {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                case /* Ciot.IfaceReqState state */ 2:
                    message.state = reader.int32();
                    break;
                case /* uint32 data_type */ 3:
                    message.dataType = reader.uint32();
                    break;
                case /* Ciot.IfaceInfo iface */ 4:
                    message.iface = IfaceInfo.internalBinaryRead(reader, reader.uint32(), options, message.iface);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IfaceReqStatus, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint32(message.id);
        /* Ciot.IfaceReqState state = 2; */
        if (message.state !== 0)
            writer.tag(2, WireType.Varint).int32(message.state);
        /* uint32 data_type = 3; */
        if (message.dataType !== 0)
            writer.tag(3, WireType.Varint).uint32(message.dataType);
        /* Ciot.IfaceInfo iface = 4; */
        if (message.iface)
            IfaceInfo.internalBinaryWrite(message.iface, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.IfaceReqStatus
 */
export const IfaceReqStatus = new IfaceReqStatus$Type();
