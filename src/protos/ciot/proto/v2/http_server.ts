// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "ciot/proto/v2/http_server.proto" (package "Ciot", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Message used to stop HTTP server interface
 *
 * @generated from protobuf message Ciot.HttpServerStop
 */
export interface HttpServerStop {
}
/**
 * Message representing HTTP server configuration.
 *
 * @generated from protobuf message Ciot.HttpServerCfg
 */
export interface HttpServerCfg {
    /**
     * @generated from protobuf field: string address = 1
     */
    address: string; // Address of the HTTP server.
    /**
     * @generated from protobuf field: string route = 2
     */
    route: string; // Route for the HTTP server.
    /**
     * @generated from protobuf field: uint32 port = 3
     */
    port: number; // Port number for the HTTP server.
    /**
     * @generated from protobuf field: string root = 4
     */
    root: string; // Server files root directory
}
/**
 * Message representing HTTP server status.
 *
 * @generated from protobuf message Ciot.HttpServerStatus
 */
export interface HttpServerStatus {
    /**
     * @generated from protobuf field: Ciot.HttpServerState state = 1
     */
    state: HttpServerState; // State of the HTTP server.
    /**
     * @generated from protobuf field: uint32 error = 2
     */
    error: number; // Error code, if any.
}
/**
 * Message representing an HTTP server request.
 *
 * @generated from protobuf message Ciot.HttpServerReq
 */
export interface HttpServerReq {
}
/**
 * Message representing HTTP server data.
 *
 * @generated from protobuf message Ciot.HttpServerData
 */
export interface HttpServerData {
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "stop";
        /**
         * @generated from protobuf field: Ciot.HttpServerStop stop = 1
         */
        stop: HttpServerStop; // Stop HTTP server.
    } | {
        oneofKind: "config";
        /**
         * @generated from protobuf field: Ciot.HttpServerCfg config = 2
         */
        config: HttpServerCfg; // Configuration for the HTTP server.
    } | {
        oneofKind: "status";
        /**
         * @generated from protobuf field: Ciot.HttpServerStatus status = 3
         */
        status: HttpServerStatus; // Status of the HTTP server.
    } | {
        oneofKind: "request";
        /**
         * @generated from protobuf field: Ciot.HttpServerReq request = 4
         */
        request: HttpServerReq; // HTTP server request data.
    } | {
        oneofKind: undefined;
    };
}
/**
 * Enum representing the state of the HTTP server.
 *
 * @generated from protobuf enum Ciot.HttpServerState
 */
export enum HttpServerState {
    /**
     * The HTTP server is stopped.
     *
     * @generated from protobuf enum value: HTTP_SERVER_STATE_STOPPED = 0;
     */
    STOPPED = 0,
    /**
     * The HTTP server is started.
     *
     * @generated from protobuf enum value: HTTP_SERVER_STATE_STARTED = 1;
     */
    STARTED = 1,
    /**
     * The HTTP server encountered an error.
     *
     * @generated from protobuf enum value: HTTP_SERVER_STATE_ERROR = 2;
     */
    ERROR = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class HttpServerStop$Type extends MessageType<HttpServerStop> {
    constructor() {
        super("Ciot.HttpServerStop", []);
    }
    create(value?: PartialMessage<HttpServerStop>): HttpServerStop {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<HttpServerStop>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HttpServerStop): HttpServerStop {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HttpServerStop, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.HttpServerStop
 */
export const HttpServerStop = new HttpServerStop$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HttpServerCfg$Type extends MessageType<HttpServerCfg> {
    constructor() {
        super("Ciot.HttpServerCfg", [
            { no: 1, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "route", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "port", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "root", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<HttpServerCfg>): HttpServerCfg {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.address = "";
        message.route = "";
        message.port = 0;
        message.root = "";
        if (value !== undefined)
            reflectionMergePartial<HttpServerCfg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HttpServerCfg): HttpServerCfg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string address */ 1:
                    message.address = reader.string();
                    break;
                case /* string route */ 2:
                    message.route = reader.string();
                    break;
                case /* uint32 port */ 3:
                    message.port = reader.uint32();
                    break;
                case /* string root */ 4:
                    message.root = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HttpServerCfg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string address = 1; */
        if (message.address !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.address);
        /* string route = 2; */
        if (message.route !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.route);
        /* uint32 port = 3; */
        if (message.port !== 0)
            writer.tag(3, WireType.Varint).uint32(message.port);
        /* string root = 4; */
        if (message.root !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.root);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.HttpServerCfg
 */
export const HttpServerCfg = new HttpServerCfg$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HttpServerStatus$Type extends MessageType<HttpServerStatus> {
    constructor() {
        super("Ciot.HttpServerStatus", [
            { no: 1, name: "state", kind: "enum", T: () => ["Ciot.HttpServerState", HttpServerState, "HTTP_SERVER_STATE_"] },
            { no: 2, name: "error", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<HttpServerStatus>): HttpServerStatus {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.state = 0;
        message.error = 0;
        if (value !== undefined)
            reflectionMergePartial<HttpServerStatus>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HttpServerStatus): HttpServerStatus {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Ciot.HttpServerState state */ 1:
                    message.state = reader.int32();
                    break;
                case /* uint32 error */ 2:
                    message.error = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HttpServerStatus, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Ciot.HttpServerState state = 1; */
        if (message.state !== 0)
            writer.tag(1, WireType.Varint).int32(message.state);
        /* uint32 error = 2; */
        if (message.error !== 0)
            writer.tag(2, WireType.Varint).uint32(message.error);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.HttpServerStatus
 */
export const HttpServerStatus = new HttpServerStatus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HttpServerReq$Type extends MessageType<HttpServerReq> {
    constructor() {
        super("Ciot.HttpServerReq", []);
    }
    create(value?: PartialMessage<HttpServerReq>): HttpServerReq {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<HttpServerReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HttpServerReq): HttpServerReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HttpServerReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.HttpServerReq
 */
export const HttpServerReq = new HttpServerReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HttpServerData$Type extends MessageType<HttpServerData> {
    constructor() {
        super("Ciot.HttpServerData", [
            { no: 1, name: "stop", kind: "message", oneof: "type", T: () => HttpServerStop },
            { no: 2, name: "config", kind: "message", oneof: "type", T: () => HttpServerCfg },
            { no: 3, name: "status", kind: "message", oneof: "type", T: () => HttpServerStatus },
            { no: 4, name: "request", kind: "message", oneof: "type", T: () => HttpServerReq }
        ]);
    }
    create(value?: PartialMessage<HttpServerData>): HttpServerData {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<HttpServerData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HttpServerData): HttpServerData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Ciot.HttpServerStop stop */ 1:
                    message.type = {
                        oneofKind: "stop",
                        stop: HttpServerStop.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).stop)
                    };
                    break;
                case /* Ciot.HttpServerCfg config */ 2:
                    message.type = {
                        oneofKind: "config",
                        config: HttpServerCfg.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).config)
                    };
                    break;
                case /* Ciot.HttpServerStatus status */ 3:
                    message.type = {
                        oneofKind: "status",
                        status: HttpServerStatus.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).status)
                    };
                    break;
                case /* Ciot.HttpServerReq request */ 4:
                    message.type = {
                        oneofKind: "request",
                        request: HttpServerReq.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).request)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HttpServerData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Ciot.HttpServerStop stop = 1; */
        if (message.type.oneofKind === "stop")
            HttpServerStop.internalBinaryWrite(message.type.stop, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* Ciot.HttpServerCfg config = 2; */
        if (message.type.oneofKind === "config")
            HttpServerCfg.internalBinaryWrite(message.type.config, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* Ciot.HttpServerStatus status = 3; */
        if (message.type.oneofKind === "status")
            HttpServerStatus.internalBinaryWrite(message.type.status, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* Ciot.HttpServerReq request = 4; */
        if (message.type.oneofKind === "request")
            HttpServerReq.internalBinaryWrite(message.type.request, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.HttpServerData
 */
export const HttpServerData = new HttpServerData$Type();
