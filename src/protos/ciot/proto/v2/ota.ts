// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "ciot/proto/v2/ota.proto" (package "Ciot", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Ota stop message
 *
 * @generated from protobuf message Ciot.OtaStop
 */
export interface OtaStop {
}
/**
 * Message representing configuration for the OTA process.
 *
 * @generated from protobuf message Ciot.OtaCfg
 */
export interface OtaCfg {
    /**
     * @generated from protobuf field: string url = 1
     */
    url: string; // URL for the OTA update.
    /**
     * @generated from protobuf field: bool force = 2
     */
    force: boolean; // Force OTA update.
    /**
     * @generated from protobuf field: bool encrypted = 3
     */
    encrypted: boolean; // Encrypted OTA update.
    /**
     * @generated from protobuf field: bool restart = 4
     */
    restart: boolean; // Restart device after OTA update.
    /**
     * @generated from protobuf field: Ciot.OtaType type = 5
     */
    type: OtaType; // OTA type
}
/**
 * Message representing status for the OTA process.
 *
 * @generated from protobuf message Ciot.OtaStatus
 */
export interface OtaStatus {
    /**
     * @generated from protobuf field: Ciot.OtaState state = 1
     */
    state: OtaState; // State of the OTA process.
    /**
     * @generated from protobuf field: int32 error = 2
     */
    error: number; // Error code, if any.
    /**
     * @generated from protobuf field: uint32 image_size = 3
     */
    imageSize: number; // Size of the OTA image.
    /**
     * @generated from protobuf field: uint32 image_written = 4
     */
    imageWritten: number; // Size of the OTA image already read.
}
/**
 * Message representing an OTA request.
 *
 * @generated from protobuf message Ciot.OtaReq
 */
export interface OtaReq {
}
/**
 * Message representing data for the OTA process.
 *
 * @generated from protobuf message Ciot.OtaData
 */
export interface OtaData {
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "stop";
        /**
         * @generated from protobuf field: Ciot.OtaStop stop = 1
         */
        stop: OtaStop; // Stop ota interface.
    } | {
        oneofKind: "config";
        /**
         * @generated from protobuf field: Ciot.OtaCfg config = 2
         */
        config: OtaCfg; // Configuration for the OTA process.
    } | {
        oneofKind: "status";
        /**
         * @generated from protobuf field: Ciot.OtaStatus status = 3
         */
        status: OtaStatus; // Status of the OTA process.
    } | {
        oneofKind: "request";
        /**
         * @generated from protobuf field: Ciot.OtaReq request = 4
         */
        request: OtaReq; // OTA request data.
    } | {
        oneofKind: undefined;
    };
}
/**
 * Enum representing the different OTA types
 *
 * @generated from protobuf enum Ciot.OtaType
 */
export enum OtaType {
    /**
     * Default OTA type used do update firmware
     *
     * @generated from protobuf enum value: OTA_TYPE_DEFAULT = 0;
     */
    DEFAULT = 0,
    /**
     * Data SPIFFS OTA type used to update data spiffs partition
     *
     * @generated from protobuf enum value: OTA_TYPE_DATA_SPIFFS = 1;
     */
    DATA_SPIFFS = 1
}
/**
 * Enum representing the state of the OTA (Over-the-Air) update process.
 *
 * @generated from protobuf enum Ciot.OtaState
 */
export enum OtaState {
    /**
     * OTA process is idle.
     *
     * @generated from protobuf enum value: OTA_STATE_IDLE = 0;
     */
    IDLE = 0,
    /**
     * OTA process is initialized.
     *
     * @generated from protobuf enum value: OTA_STATE_INIT = 1;
     */
    INIT = 1,
    /**
     * OTA process is in progress.
     *
     * @generated from protobuf enum value: OTA_STATE_IN_PROGRESS = 2;
     */
    IN_PROGRESS = 2,
    /**
     * OTA process is starting.
     *
     * @generated from protobuf enum value: OTA_STATE_START = 3;
     */
    START = 3,
    /**
     * OTA process is connected.
     *
     * @generated from protobuf enum value: OTA_STATE_CONNECTED = 4;
     */
    CONNECTED = 4,
    /**
     * OTA process is checking data.
     *
     * @generated from protobuf enum value: OTA_STATE_CHECKING_DATA = 5;
     */
    CHECKING_DATA = 5,
    /**
     * OTA process is decrypting data.
     *
     * @generated from protobuf enum value: OTA_STATE_DECRYPTING = 6;
     */
    DECRYPTING = 6,
    /**
     * OTA process is flashing data.
     *
     * @generated from protobuf enum value: OTA_STATE_FLASHING = 7;
     */
    FLASHING = 7,
    /**
     * OTA process is updating boot partition.
     *
     * @generated from protobuf enum value: OTA_STATE_UPDATE_BOOT_PARTITION = 8;
     */
    UPDATE_BOOT_PARTITION = 8,
    /**
     * OTA process is done.
     *
     * @generated from protobuf enum value: OTA_STATE_STATE_DONE = 9;
     */
    STATE_DONE = 9,
    /**
     * OTA process encountered an error.
     *
     * @generated from protobuf enum value: OTA_STATE_ERROR = 10;
     */
    ERROR = 10
}
// @generated message type with reflection information, may provide speed optimized methods
class OtaStop$Type extends MessageType<OtaStop> {
    constructor() {
        super("Ciot.OtaStop", []);
    }
    create(value?: PartialMessage<OtaStop>): OtaStop {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<OtaStop>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OtaStop): OtaStop {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OtaStop, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.OtaStop
 */
export const OtaStop = new OtaStop$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OtaCfg$Type extends MessageType<OtaCfg> {
    constructor() {
        super("Ciot.OtaCfg", [
            { no: 1, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "force", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "encrypted", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "restart", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "type", kind: "enum", T: () => ["Ciot.OtaType", OtaType, "OTA_TYPE_"] }
        ]);
    }
    create(value?: PartialMessage<OtaCfg>): OtaCfg {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.url = "";
        message.force = false;
        message.encrypted = false;
        message.restart = false;
        message.type = 0;
        if (value !== undefined)
            reflectionMergePartial<OtaCfg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OtaCfg): OtaCfg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string url */ 1:
                    message.url = reader.string();
                    break;
                case /* bool force */ 2:
                    message.force = reader.bool();
                    break;
                case /* bool encrypted */ 3:
                    message.encrypted = reader.bool();
                    break;
                case /* bool restart */ 4:
                    message.restart = reader.bool();
                    break;
                case /* Ciot.OtaType type */ 5:
                    message.type = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OtaCfg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string url = 1; */
        if (message.url !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.url);
        /* bool force = 2; */
        if (message.force !== false)
            writer.tag(2, WireType.Varint).bool(message.force);
        /* bool encrypted = 3; */
        if (message.encrypted !== false)
            writer.tag(3, WireType.Varint).bool(message.encrypted);
        /* bool restart = 4; */
        if (message.restart !== false)
            writer.tag(4, WireType.Varint).bool(message.restart);
        /* Ciot.OtaType type = 5; */
        if (message.type !== 0)
            writer.tag(5, WireType.Varint).int32(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.OtaCfg
 */
export const OtaCfg = new OtaCfg$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OtaStatus$Type extends MessageType<OtaStatus> {
    constructor() {
        super("Ciot.OtaStatus", [
            { no: 1, name: "state", kind: "enum", T: () => ["Ciot.OtaState", OtaState, "OTA_STATE_"] },
            { no: 2, name: "error", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "image_size", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "image_written", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<OtaStatus>): OtaStatus {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.state = 0;
        message.error = 0;
        message.imageSize = 0;
        message.imageWritten = 0;
        if (value !== undefined)
            reflectionMergePartial<OtaStatus>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OtaStatus): OtaStatus {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Ciot.OtaState state */ 1:
                    message.state = reader.int32();
                    break;
                case /* int32 error */ 2:
                    message.error = reader.int32();
                    break;
                case /* uint32 image_size */ 3:
                    message.imageSize = reader.uint32();
                    break;
                case /* uint32 image_written */ 4:
                    message.imageWritten = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OtaStatus, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Ciot.OtaState state = 1; */
        if (message.state !== 0)
            writer.tag(1, WireType.Varint).int32(message.state);
        /* int32 error = 2; */
        if (message.error !== 0)
            writer.tag(2, WireType.Varint).int32(message.error);
        /* uint32 image_size = 3; */
        if (message.imageSize !== 0)
            writer.tag(3, WireType.Varint).uint32(message.imageSize);
        /* uint32 image_written = 4; */
        if (message.imageWritten !== 0)
            writer.tag(4, WireType.Varint).uint32(message.imageWritten);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.OtaStatus
 */
export const OtaStatus = new OtaStatus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OtaReq$Type extends MessageType<OtaReq> {
    constructor() {
        super("Ciot.OtaReq", []);
    }
    create(value?: PartialMessage<OtaReq>): OtaReq {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<OtaReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OtaReq): OtaReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OtaReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.OtaReq
 */
export const OtaReq = new OtaReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OtaData$Type extends MessageType<OtaData> {
    constructor() {
        super("Ciot.OtaData", [
            { no: 1, name: "stop", kind: "message", oneof: "type", T: () => OtaStop },
            { no: 2, name: "config", kind: "message", oneof: "type", T: () => OtaCfg },
            { no: 3, name: "status", kind: "message", oneof: "type", T: () => OtaStatus },
            { no: 4, name: "request", kind: "message", oneof: "type", T: () => OtaReq }
        ]);
    }
    create(value?: PartialMessage<OtaData>): OtaData {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<OtaData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OtaData): OtaData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Ciot.OtaStop stop */ 1:
                    message.type = {
                        oneofKind: "stop",
                        stop: OtaStop.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).stop)
                    };
                    break;
                case /* Ciot.OtaCfg config */ 2:
                    message.type = {
                        oneofKind: "config",
                        config: OtaCfg.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).config)
                    };
                    break;
                case /* Ciot.OtaStatus status */ 3:
                    message.type = {
                        oneofKind: "status",
                        status: OtaStatus.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).status)
                    };
                    break;
                case /* Ciot.OtaReq request */ 4:
                    message.type = {
                        oneofKind: "request",
                        request: OtaReq.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).request)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OtaData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Ciot.OtaStop stop = 1; */
        if (message.type.oneofKind === "stop")
            OtaStop.internalBinaryWrite(message.type.stop, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* Ciot.OtaCfg config = 2; */
        if (message.type.oneofKind === "config")
            OtaCfg.internalBinaryWrite(message.type.config, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* Ciot.OtaStatus status = 3; */
        if (message.type.oneofKind === "status")
            OtaStatus.internalBinaryWrite(message.type.status, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* Ciot.OtaReq request = 4; */
        if (message.type.oneofKind === "request")
            OtaReq.internalBinaryWrite(message.type.request, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.OtaData
 */
export const OtaData = new OtaData$Type();
