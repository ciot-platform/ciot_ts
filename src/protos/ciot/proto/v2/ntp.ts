// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "ciot/proto/v2/ntp.proto" (package "Ciot", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Message used to stop NTP client
 *
 * @generated from protobuf message Ciot.NtpStop
 */
export interface NtpStop {
}
/**
 * Message representing configuration for the NTP module.
 *
 * @generated from protobuf message Ciot.NtpCfg
 */
export interface NtpCfg {
    /**
     * @generated from protobuf field: uint32 op_mode = 1
     */
    opMode: number; // Operation mode for NTP.
    /**
     * @generated from protobuf field: uint32 sync_mode = 2
     */
    syncMode: number; // Synchronization mode for NTP.
    /**
     * @generated from protobuf field: uint32 sync_interval = 3
     */
    syncInterval: number; // Synchronization interval for NTP.
    /**
     * @generated from protobuf field: string timezone = 4
     */
    timezone: string; // Timezone for NTP.
    /**
     * @generated from protobuf field: string server1 = 5
     */
    server1: string; // NTP server 1.
    /**
     * @generated from protobuf field: string server2 = 6
     */
    server2: string; // NTP server 2.
    /**
     * @generated from protobuf field: string server3 = 7
     */
    server3: string; // NTP server 3.
}
/**
 * Message representing status for the NTP module.
 *
 * @generated from protobuf message Ciot.NtpStatus
 */
export interface NtpStatus {
    /**
     * @generated from protobuf field: Ciot.NtpState state = 1
     */
    state: NtpState; // State of the NTP module.
    /**
     * @generated from protobuf field: uint64 last_sync = 2
     */
    lastSync: bigint; // Timestamp of the last synchronization.
    /**
     * @generated from protobuf field: uint32 sync_count = 3
     */
    syncCount: number; // Number of synchronizations.
    /**
     * @generated from protobuf field: bool init = 4
     */
    init: boolean; // Initialization status.
    /**
     * @generated from protobuf field: bool sync = 5
     */
    sync: boolean; // Synchronization status.
}
/**
 * Message representing an NTP request.
 *
 * @generated from protobuf message Ciot.NtpReq
 */
export interface NtpReq {
}
/**
 * Message representing data for the NTP module.
 *
 * @generated from protobuf message Ciot.NtpData
 */
export interface NtpData {
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "stop";
        /**
         * @generated from protobuf field: Ciot.NtpStop stop = 1
         */
        stop: NtpStop; // Stop NTP client.
    } | {
        oneofKind: "config";
        /**
         * @generated from protobuf field: Ciot.NtpCfg config = 2
         */
        config: NtpCfg; // Configuration for the NTP module.
    } | {
        oneofKind: "status";
        /**
         * @generated from protobuf field: Ciot.NtpStatus status = 3
         */
        status: NtpStatus; // Status of the NTP module.
    } | {
        oneofKind: "request";
        /**
         * @generated from protobuf field: Ciot.NtpReq request = 4
         */
        request: NtpReq; // NTP request data.
    } | {
        oneofKind: undefined;
    };
}
/**
 * Enum representing the state of the NTP module.
 *
 * @generated from protobuf enum Ciot.NtpState
 */
export enum NtpState {
    /**
     * NTP state: reset.
     *
     * @generated from protobuf enum value: NTP_STATE_RESET = 0;
     */
    RESET = 0,
    /**
     * NTP state: completed.
     *
     * @generated from protobuf enum value: NTP_STATE_COMPLETED = 1;
     */
    COMPLETED = 1,
    /**
     * NTP state: in progress.
     *
     * @generated from protobuf enum value: NTP_STATE_IN_PROGRESS = 2;
     */
    IN_PROGRESS = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class NtpStop$Type extends MessageType<NtpStop> {
    constructor() {
        super("Ciot.NtpStop", []);
    }
    create(value?: PartialMessage<NtpStop>): NtpStop {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<NtpStop>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NtpStop): NtpStop {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NtpStop, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.NtpStop
 */
export const NtpStop = new NtpStop$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NtpCfg$Type extends MessageType<NtpCfg> {
    constructor() {
        super("Ciot.NtpCfg", [
            { no: 1, name: "op_mode", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "sync_mode", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "sync_interval", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "timezone", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "server1", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "server2", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "server3", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<NtpCfg>): NtpCfg {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.opMode = 0;
        message.syncMode = 0;
        message.syncInterval = 0;
        message.timezone = "";
        message.server1 = "";
        message.server2 = "";
        message.server3 = "";
        if (value !== undefined)
            reflectionMergePartial<NtpCfg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NtpCfg): NtpCfg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 op_mode */ 1:
                    message.opMode = reader.uint32();
                    break;
                case /* uint32 sync_mode */ 2:
                    message.syncMode = reader.uint32();
                    break;
                case /* uint32 sync_interval */ 3:
                    message.syncInterval = reader.uint32();
                    break;
                case /* string timezone */ 4:
                    message.timezone = reader.string();
                    break;
                case /* string server1 */ 5:
                    message.server1 = reader.string();
                    break;
                case /* string server2 */ 6:
                    message.server2 = reader.string();
                    break;
                case /* string server3 */ 7:
                    message.server3 = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NtpCfg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 op_mode = 1; */
        if (message.opMode !== 0)
            writer.tag(1, WireType.Varint).uint32(message.opMode);
        /* uint32 sync_mode = 2; */
        if (message.syncMode !== 0)
            writer.tag(2, WireType.Varint).uint32(message.syncMode);
        /* uint32 sync_interval = 3; */
        if (message.syncInterval !== 0)
            writer.tag(3, WireType.Varint).uint32(message.syncInterval);
        /* string timezone = 4; */
        if (message.timezone !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.timezone);
        /* string server1 = 5; */
        if (message.server1 !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.server1);
        /* string server2 = 6; */
        if (message.server2 !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.server2);
        /* string server3 = 7; */
        if (message.server3 !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.server3);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.NtpCfg
 */
export const NtpCfg = new NtpCfg$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NtpStatus$Type extends MessageType<NtpStatus> {
    constructor() {
        super("Ciot.NtpStatus", [
            { no: 1, name: "state", kind: "enum", T: () => ["Ciot.NtpState", NtpState, "NTP_STATE_"] },
            { no: 2, name: "last_sync", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "sync_count", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "init", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "sync", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<NtpStatus>): NtpStatus {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.state = 0;
        message.lastSync = 0n;
        message.syncCount = 0;
        message.init = false;
        message.sync = false;
        if (value !== undefined)
            reflectionMergePartial<NtpStatus>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NtpStatus): NtpStatus {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Ciot.NtpState state */ 1:
                    message.state = reader.int32();
                    break;
                case /* uint64 last_sync */ 2:
                    message.lastSync = reader.uint64().toBigInt();
                    break;
                case /* uint32 sync_count */ 3:
                    message.syncCount = reader.uint32();
                    break;
                case /* bool init */ 4:
                    message.init = reader.bool();
                    break;
                case /* bool sync */ 5:
                    message.sync = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NtpStatus, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Ciot.NtpState state = 1; */
        if (message.state !== 0)
            writer.tag(1, WireType.Varint).int32(message.state);
        /* uint64 last_sync = 2; */
        if (message.lastSync !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.lastSync);
        /* uint32 sync_count = 3; */
        if (message.syncCount !== 0)
            writer.tag(3, WireType.Varint).uint32(message.syncCount);
        /* bool init = 4; */
        if (message.init !== false)
            writer.tag(4, WireType.Varint).bool(message.init);
        /* bool sync = 5; */
        if (message.sync !== false)
            writer.tag(5, WireType.Varint).bool(message.sync);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.NtpStatus
 */
export const NtpStatus = new NtpStatus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NtpReq$Type extends MessageType<NtpReq> {
    constructor() {
        super("Ciot.NtpReq", []);
    }
    create(value?: PartialMessage<NtpReq>): NtpReq {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<NtpReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NtpReq): NtpReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NtpReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.NtpReq
 */
export const NtpReq = new NtpReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NtpData$Type extends MessageType<NtpData> {
    constructor() {
        super("Ciot.NtpData", [
            { no: 1, name: "stop", kind: "message", oneof: "type", T: () => NtpStop },
            { no: 2, name: "config", kind: "message", oneof: "type", T: () => NtpCfg },
            { no: 3, name: "status", kind: "message", oneof: "type", T: () => NtpStatus },
            { no: 4, name: "request", kind: "message", oneof: "type", T: () => NtpReq }
        ]);
    }
    create(value?: PartialMessage<NtpData>): NtpData {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<NtpData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NtpData): NtpData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Ciot.NtpStop stop */ 1:
                    message.type = {
                        oneofKind: "stop",
                        stop: NtpStop.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).stop)
                    };
                    break;
                case /* Ciot.NtpCfg config */ 2:
                    message.type = {
                        oneofKind: "config",
                        config: NtpCfg.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).config)
                    };
                    break;
                case /* Ciot.NtpStatus status */ 3:
                    message.type = {
                        oneofKind: "status",
                        status: NtpStatus.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).status)
                    };
                    break;
                case /* Ciot.NtpReq request */ 4:
                    message.type = {
                        oneofKind: "request",
                        request: NtpReq.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).request)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NtpData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Ciot.NtpStop stop = 1; */
        if (message.type.oneofKind === "stop")
            NtpStop.internalBinaryWrite(message.type.stop, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* Ciot.NtpCfg config = 2; */
        if (message.type.oneofKind === "config")
            NtpCfg.internalBinaryWrite(message.type.config, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* Ciot.NtpStatus status = 3; */
        if (message.type.oneofKind === "status")
            NtpStatus.internalBinaryWrite(message.type.status, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* Ciot.NtpReq request = 4; */
        if (message.type.oneofKind === "request")
            NtpReq.internalBinaryWrite(message.type.request, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.NtpData
 */
export const NtpData = new NtpData$Type();
