// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "ciot/proto/v2/usb.proto" (package "Ciot", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// Enum representing different types of USB requests.
// enum UsbReqType {
//   USB_REQ_TYPE_UNKOWN = 0;             // Unknown USB request type.
//   USB_REQ_TYPE_SEND_DATA = 1;          // Send data over USB.
//   USB_REQ_TYPE_SEND_BYTES = 2;         // Send bytes over USB.
// }

/**
 * Stop USB interface
 *
 * @generated from protobuf message Ciot.UsbStop
 */
export interface UsbStop {
}
/**
 * Message representing configuration for the USB module.
 *
 * @generated from protobuf message Ciot.UsbCfg
 */
export interface UsbCfg {
    /**
     * @generated from protobuf field: bool bridge_mode = 1
     */
    bridgeMode: boolean; // Flag indicating whether bridge mode is enabled.
}
/**
 * Message representing status for the USB module.
 *
 * @generated from protobuf message Ciot.UsbStatus
 */
export interface UsbStatus {
    /**
     * @generated from protobuf field: Ciot.UsbState state = 1
     */
    state: UsbState; // State of the USB module.
}
/**
 * Message representing data for a USB request.
 *
 * @generated from protobuf message Ciot.UsbReq
 */
export interface UsbReq {
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "sendData";
        /**
         * @generated from protobuf field: bytes send_data = 1
         */
        sendData: Uint8Array; // Send data over USB.
    } | {
        oneofKind: "sendBytes";
        /**
         * @generated from protobuf field: bytes send_bytes = 2
         */
        sendBytes: Uint8Array; // Send bytes over USB.
    } | {
        oneofKind: undefined;
    };
}
/**
 * Message representing data for the USB module.
 *
 * @generated from protobuf message Ciot.UsbData
 */
export interface UsbData {
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "stop";
        /**
         * @generated from protobuf field: Ciot.UsbStop stop = 1
         */
        stop: UsbStop; // Stop USB interface
    } | {
        oneofKind: "config";
        /**
         * @generated from protobuf field: Ciot.UsbCfg config = 2
         */
        config: UsbCfg; // Configuration for the USB module.
    } | {
        oneofKind: "status";
        /**
         * @generated from protobuf field: Ciot.UsbStatus status = 3
         */
        status: UsbStatus; // Status of the USB module.
    } | {
        oneofKind: "request";
        /**
         * @generated from protobuf field: Ciot.UsbReq request = 4
         */
        request: UsbReq; // USB request data.
    } | {
        oneofKind: undefined;
    };
}
/**
 * Enum representing the state of the USB module.
 *
 * @generated from protobuf enum Ciot.UsbState
 */
export enum UsbState {
    /**
     * USB module is stopped.
     *
     * @generated from protobuf enum value: USB_STATE_STOPPED = 0;
     */
    STOPPED = 0,
    /**
     * USB module is started.
     *
     * @generated from protobuf enum value: USB_STATE_STARTED = 1;
     */
    STARTED = 1,
    /**
     * USB module encountered CIOT-S error.
     *
     * @generated from protobuf enum value: USB_STATE_CIOT_S_ERROR = 3;
     */
    CIOT_S_ERROR = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class UsbStop$Type extends MessageType<UsbStop> {
    constructor() {
        super("Ciot.UsbStop", []);
    }
    create(value?: PartialMessage<UsbStop>): UsbStop {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UsbStop>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UsbStop): UsbStop {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UsbStop, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.UsbStop
 */
export const UsbStop = new UsbStop$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UsbCfg$Type extends MessageType<UsbCfg> {
    constructor() {
        super("Ciot.UsbCfg", [
            { no: 1, name: "bridge_mode", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<UsbCfg>): UsbCfg {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.bridgeMode = false;
        if (value !== undefined)
            reflectionMergePartial<UsbCfg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UsbCfg): UsbCfg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool bridge_mode */ 1:
                    message.bridgeMode = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UsbCfg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool bridge_mode = 1; */
        if (message.bridgeMode !== false)
            writer.tag(1, WireType.Varint).bool(message.bridgeMode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.UsbCfg
 */
export const UsbCfg = new UsbCfg$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UsbStatus$Type extends MessageType<UsbStatus> {
    constructor() {
        super("Ciot.UsbStatus", [
            { no: 1, name: "state", kind: "enum", T: () => ["Ciot.UsbState", UsbState, "USB_STATE_"] }
        ]);
    }
    create(value?: PartialMessage<UsbStatus>): UsbStatus {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.state = 0;
        if (value !== undefined)
            reflectionMergePartial<UsbStatus>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UsbStatus): UsbStatus {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Ciot.UsbState state */ 1:
                    message.state = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UsbStatus, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Ciot.UsbState state = 1; */
        if (message.state !== 0)
            writer.tag(1, WireType.Varint).int32(message.state);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.UsbStatus
 */
export const UsbStatus = new UsbStatus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UsbReq$Type extends MessageType<UsbReq> {
    constructor() {
        super("Ciot.UsbReq", [
            { no: 1, name: "send_data", kind: "scalar", oneof: "type", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "send_bytes", kind: "scalar", oneof: "type", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<UsbReq>): UsbReq {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<UsbReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UsbReq): UsbReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes send_data */ 1:
                    message.type = {
                        oneofKind: "sendData",
                        sendData: reader.bytes()
                    };
                    break;
                case /* bytes send_bytes */ 2:
                    message.type = {
                        oneofKind: "sendBytes",
                        sendBytes: reader.bytes()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UsbReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes send_data = 1; */
        if (message.type.oneofKind === "sendData")
            writer.tag(1, WireType.LengthDelimited).bytes(message.type.sendData);
        /* bytes send_bytes = 2; */
        if (message.type.oneofKind === "sendBytes")
            writer.tag(2, WireType.LengthDelimited).bytes(message.type.sendBytes);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.UsbReq
 */
export const UsbReq = new UsbReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UsbData$Type extends MessageType<UsbData> {
    constructor() {
        super("Ciot.UsbData", [
            { no: 1, name: "stop", kind: "message", oneof: "type", T: () => UsbStop },
            { no: 2, name: "config", kind: "message", oneof: "type", T: () => UsbCfg },
            { no: 3, name: "status", kind: "message", oneof: "type", T: () => UsbStatus },
            { no: 4, name: "request", kind: "message", oneof: "type", T: () => UsbReq }
        ]);
    }
    create(value?: PartialMessage<UsbData>): UsbData {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<UsbData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UsbData): UsbData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Ciot.UsbStop stop */ 1:
                    message.type = {
                        oneofKind: "stop",
                        stop: UsbStop.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).stop)
                    };
                    break;
                case /* Ciot.UsbCfg config */ 2:
                    message.type = {
                        oneofKind: "config",
                        config: UsbCfg.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).config)
                    };
                    break;
                case /* Ciot.UsbStatus status */ 3:
                    message.type = {
                        oneofKind: "status",
                        status: UsbStatus.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).status)
                    };
                    break;
                case /* Ciot.UsbReq request */ 4:
                    message.type = {
                        oneofKind: "request",
                        request: UsbReq.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).request)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UsbData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Ciot.UsbStop stop = 1; */
        if (message.type.oneofKind === "stop")
            UsbStop.internalBinaryWrite(message.type.stop, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* Ciot.UsbCfg config = 2; */
        if (message.type.oneofKind === "config")
            UsbCfg.internalBinaryWrite(message.type.config, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* Ciot.UsbStatus status = 3; */
        if (message.type.oneofKind === "status")
            UsbStatus.internalBinaryWrite(message.type.status, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* Ciot.UsbReq request = 4; */
        if (message.type.oneofKind === "request")
            UsbReq.internalBinaryWrite(message.type.request, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.UsbData
 */
export const UsbData = new UsbData$Type();
