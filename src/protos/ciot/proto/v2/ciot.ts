// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "ciot/proto/v2/ciot.proto" (package "Ciot", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { IfaceInfo } from "./iface";
import { IfaceState } from "./iface";
import { IfaceType } from "./iface";
/**
 * Message representing CIOT information.
 *
 * @generated from protobuf message Ciot.Info
 */
export interface Info {
    /**
     * @generated from protobuf field: bytes version = 1
     */
    version: Uint8Array; // CIOT library version
    /**
     * @generated from protobuf field: repeated Ciot.IfaceType ifaces = 2
     */
    ifaces: IfaceType[]; // CIOT ifaces types list
}
/**
 * Message representing CIOT status.
 *
 * @generated from protobuf message Ciot.Status
 */
export interface Status {
    /**
     * @generated from protobuf field: Ciot.State state = 1
     */
    state: State; // State of the CIOT device.
    /**
     * @generated from protobuf field: repeated Ciot.IfaceStatus ifaces = 2
     */
    ifaces: IfaceStatus[]; // Status of each CIOT iface.
}
/**
 * Message representing an CIOT iface status.
 *
 * @generated from protobuf message Ciot.IfaceStatus
 */
export interface IfaceStatus {
    /**
     * @generated from protobuf field: Ciot.IfaceType type = 1
     */
    type: IfaceType; // Iface type
    /**
     * @generated from protobuf field: Ciot.IfaceState state = 2
     */
    state: IfaceState; // Iface state
}
/**
 * Message representing a CIOT request.
 *
 * @generated from protobuf message Ciot.Req
 */
export interface Req {
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "saveCfg";
        /**
         * @generated from protobuf field: Ciot.IfaceInfo save_cfg = 1
         */
        saveCfg: IfaceInfo; // Save interface configuration
    } | {
        oneofKind: "deleteCfg";
        /**
         * @generated from protobuf field: Ciot.IfaceInfo delete_cfg = 2
         */
        deleteCfg: IfaceInfo; // Delete interface configuration
    } | {
        oneofKind: undefined;
    };
}
/**
 * Message representing CIOT data.
 *
 * @generated from protobuf message Ciot.Data
 */
export interface Data {
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "status";
        /**
         * @generated from protobuf field: Ciot.Status status = 2
         */
        status: Status; // Status of the CIOT device.
    } | {
        oneofKind: "request";
        /**
         * @generated from protobuf field: Ciot.Req request = 3
         */
        request: Req; // CIOT request data.
    } | {
        oneofKind: "info";
        /**
         * @generated from protobuf field: Ciot.Info info = 6
         */
        info: Info; // Additional information about the CIOT device.
    } | {
        oneofKind: undefined;
    };
}
/**
 * Enum representing the state of CIOT.
 *
 * @generated from protobuf enum Ciot.State
 */
export enum State {
    /**
     * CIOT core is in an idle state.
     *
     * @generated from protobuf enum value: STATE_IDLE = 0;
     */
    IDLE = 0,
    /**
     * CIOT core is started.
     *
     * @generated from protobuf enum value: STATE_STARTED = 1;
     */
    STARTED = 1,
    /**
     * CIOT core is starting.
     *
     * @generated from protobuf enum value: STATE_STARTING = 2;
     */
    STARTING = 2,
    /**
     * CIOT core is busy.
     *
     * @generated from protobuf enum value: STATE_BUSY = 3;
     */
    BUSY = 3,
    /**
     * CIOT core encountered an error.
     *
     * @generated from protobuf enum value: STATE_ERROR = 4;
     */
    ERROR = 4
}
/**
 * Enum representing different serialization types for CIOT.
 *
 * @generated from protobuf enum Ciot.SerializationType
 */
export enum SerializationType {
    /**
     * Protocol Buffers serialization type.
     *
     * @generated from protobuf enum value: SERIALIZATION_PROTOBUF = 0;
     */
    SERIALIZATION_PROTOBUF = 0
}
// @generated message type with reflection information, may provide speed optimized methods
class Info$Type extends MessageType<Info> {
    constructor() {
        super("Ciot.Info", [
            { no: 1, name: "version", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "ifaces", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["Ciot.IfaceType", IfaceType, "IFACE_TYPE_"] }
        ]);
    }
    create(value?: PartialMessage<Info>): Info {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.version = new Uint8Array(0);
        message.ifaces = [];
        if (value !== undefined)
            reflectionMergePartial<Info>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Info): Info {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes version */ 1:
                    message.version = reader.bytes();
                    break;
                case /* repeated Ciot.IfaceType ifaces */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.ifaces.push(reader.int32());
                    else
                        message.ifaces.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Info, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes version = 1; */
        if (message.version.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.version);
        /* repeated Ciot.IfaceType ifaces = 2; */
        if (message.ifaces.length) {
            writer.tag(2, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.ifaces.length; i++)
                writer.int32(message.ifaces[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.Info
 */
export const Info = new Info$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Status$Type extends MessageType<Status> {
    constructor() {
        super("Ciot.Status", [
            { no: 1, name: "state", kind: "enum", T: () => ["Ciot.State", State, "STATE_"] },
            { no: 2, name: "ifaces", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => IfaceStatus }
        ]);
    }
    create(value?: PartialMessage<Status>): Status {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.state = 0;
        message.ifaces = [];
        if (value !== undefined)
            reflectionMergePartial<Status>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Status): Status {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Ciot.State state */ 1:
                    message.state = reader.int32();
                    break;
                case /* repeated Ciot.IfaceStatus ifaces */ 2:
                    message.ifaces.push(IfaceStatus.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Status, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Ciot.State state = 1; */
        if (message.state !== 0)
            writer.tag(1, WireType.Varint).int32(message.state);
        /* repeated Ciot.IfaceStatus ifaces = 2; */
        for (let i = 0; i < message.ifaces.length; i++)
            IfaceStatus.internalBinaryWrite(message.ifaces[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.Status
 */
export const Status = new Status$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IfaceStatus$Type extends MessageType<IfaceStatus> {
    constructor() {
        super("Ciot.IfaceStatus", [
            { no: 1, name: "type", kind: "enum", T: () => ["Ciot.IfaceType", IfaceType, "IFACE_TYPE_"] },
            { no: 2, name: "state", kind: "enum", T: () => ["Ciot.IfaceState", IfaceState, "IFACE_STATE_"] }
        ]);
    }
    create(value?: PartialMessage<IfaceStatus>): IfaceStatus {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = 0;
        message.state = 0;
        if (value !== undefined)
            reflectionMergePartial<IfaceStatus>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IfaceStatus): IfaceStatus {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Ciot.IfaceType type */ 1:
                    message.type = reader.int32();
                    break;
                case /* Ciot.IfaceState state */ 2:
                    message.state = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IfaceStatus, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Ciot.IfaceType type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* Ciot.IfaceState state = 2; */
        if (message.state !== 0)
            writer.tag(2, WireType.Varint).int32(message.state);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.IfaceStatus
 */
export const IfaceStatus = new IfaceStatus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Req$Type extends MessageType<Req> {
    constructor() {
        super("Ciot.Req", [
            { no: 1, name: "save_cfg", kind: "message", oneof: "type", T: () => IfaceInfo },
            { no: 2, name: "delete_cfg", kind: "message", oneof: "type", T: () => IfaceInfo }
        ]);
    }
    create(value?: PartialMessage<Req>): Req {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<Req>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Req): Req {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Ciot.IfaceInfo save_cfg */ 1:
                    message.type = {
                        oneofKind: "saveCfg",
                        saveCfg: IfaceInfo.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).saveCfg)
                    };
                    break;
                case /* Ciot.IfaceInfo delete_cfg */ 2:
                    message.type = {
                        oneofKind: "deleteCfg",
                        deleteCfg: IfaceInfo.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).deleteCfg)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Req, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Ciot.IfaceInfo save_cfg = 1; */
        if (message.type.oneofKind === "saveCfg")
            IfaceInfo.internalBinaryWrite(message.type.saveCfg, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* Ciot.IfaceInfo delete_cfg = 2; */
        if (message.type.oneofKind === "deleteCfg")
            IfaceInfo.internalBinaryWrite(message.type.deleteCfg, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.Req
 */
export const Req = new Req$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Data$Type extends MessageType<Data> {
    constructor() {
        super("Ciot.Data", [
            { no: 2, name: "status", kind: "message", oneof: "type", T: () => Status },
            { no: 3, name: "request", kind: "message", oneof: "type", T: () => Req },
            { no: 6, name: "info", kind: "message", oneof: "type", T: () => Info }
        ]);
    }
    create(value?: PartialMessage<Data>): Data {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<Data>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Data): Data {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Ciot.Status status */ 2:
                    message.type = {
                        oneofKind: "status",
                        status: Status.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).status)
                    };
                    break;
                case /* Ciot.Req request */ 3:
                    message.type = {
                        oneofKind: "request",
                        request: Req.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).request)
                    };
                    break;
                case /* Ciot.Info info */ 6:
                    message.type = {
                        oneofKind: "info",
                        info: Info.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).info)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Data, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Ciot.Status status = 2; */
        if (message.type.oneofKind === "status")
            Status.internalBinaryWrite(message.type.status, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* Ciot.Req request = 3; */
        if (message.type.oneofKind === "request")
            Req.internalBinaryWrite(message.type.request, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* Ciot.Info info = 6; */
        if (message.type.oneofKind === "info")
            Info.internalBinaryWrite(message.type.info, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.Data
 */
export const Data = new Data$Type();
