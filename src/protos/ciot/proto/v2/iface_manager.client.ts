// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "ciot/proto/v2/iface_manager.proto" (package "Ciot", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { IfaceManagerService } from "./iface_manager";
import type { Event } from "./event";
import type { SubscribeToEventsRequest } from "./iface_manager";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { SendMessageResponse } from "./iface_manager";
import type { SendMessageRequest } from "./iface_manager";
import type { GetSelectedIfaceResponse } from "./iface_manager";
import type { SelectIfaceResponse } from "./iface_manager";
import type { SelectIfaceRequest } from "./iface_manager";
import type { DeleteIfaceResponse } from "./iface_manager";
import type { DeleteIfaceRequest } from "./iface_manager";
import type { UpdateIfaceResponse } from "./iface_manager";
import type { UpdateIfaceRequest } from "./iface_manager";
import type { GetIfacesResponse } from "./iface_manager";
import type { Empty } from "../../../google/protobuf/empty";
import type { GetIfaceResponse } from "./iface_manager";
import type { GetIfaceRequest } from "./iface_manager";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { CreateIfaceResponse } from "./iface_manager";
import type { CreateIfaceRequest } from "./iface_manager";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service Ciot.IfaceManagerService
 */
export interface IIfaceManagerServiceClient {
    /**
     * @generated from protobuf rpc: CreateIface
     */
    createIface(input: CreateIfaceRequest, options?: RpcOptions): UnaryCall<CreateIfaceRequest, CreateIfaceResponse>;
    /**
     * @generated from protobuf rpc: GetIface
     */
    getIface(input: GetIfaceRequest, options?: RpcOptions): UnaryCall<GetIfaceRequest, GetIfaceResponse>;
    /**
     * @generated from protobuf rpc: GetIfaces
     */
    getIfaces(input: Empty, options?: RpcOptions): UnaryCall<Empty, GetIfacesResponse>;
    /**
     * @generated from protobuf rpc: UpdateIface
     */
    updateIface(input: UpdateIfaceRequest, options?: RpcOptions): UnaryCall<UpdateIfaceRequest, UpdateIfaceResponse>;
    /**
     * @generated from protobuf rpc: DeleteIface
     */
    deleteIface(input: DeleteIfaceRequest, options?: RpcOptions): UnaryCall<DeleteIfaceRequest, DeleteIfaceResponse>;
    /**
     * @generated from protobuf rpc: SelectIface
     */
    selectIface(input: SelectIfaceRequest, options?: RpcOptions): UnaryCall<SelectIfaceRequest, SelectIfaceResponse>;
    /**
     * @generated from protobuf rpc: GetSelectedIface
     */
    getSelectedIface(input: Empty, options?: RpcOptions): UnaryCall<Empty, GetSelectedIfaceResponse>;
    /**
     * @generated from protobuf rpc: SendMessage
     */
    sendMessage(input: SendMessageRequest, options?: RpcOptions): UnaryCall<SendMessageRequest, SendMessageResponse>;
    /**
     * @generated from protobuf rpc: SubscribeToEvents
     */
    subscribeToEvents(input: SubscribeToEventsRequest, options?: RpcOptions): ServerStreamingCall<SubscribeToEventsRequest, Event>;
}
/**
 * @generated from protobuf service Ciot.IfaceManagerService
 */
export class IfaceManagerServiceClient implements IIfaceManagerServiceClient, ServiceInfo {
    typeName = IfaceManagerService.typeName;
    methods = IfaceManagerService.methods;
    options = IfaceManagerService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: CreateIface
     */
    createIface(input: CreateIfaceRequest, options?: RpcOptions): UnaryCall<CreateIfaceRequest, CreateIfaceResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateIfaceRequest, CreateIfaceResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetIface
     */
    getIface(input: GetIfaceRequest, options?: RpcOptions): UnaryCall<GetIfaceRequest, GetIfaceResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetIfaceRequest, GetIfaceResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetIfaces
     */
    getIfaces(input: Empty, options?: RpcOptions): UnaryCall<Empty, GetIfacesResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, GetIfacesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateIface
     */
    updateIface(input: UpdateIfaceRequest, options?: RpcOptions): UnaryCall<UpdateIfaceRequest, UpdateIfaceResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateIfaceRequest, UpdateIfaceResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteIface
     */
    deleteIface(input: DeleteIfaceRequest, options?: RpcOptions): UnaryCall<DeleteIfaceRequest, DeleteIfaceResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteIfaceRequest, DeleteIfaceResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SelectIface
     */
    selectIface(input: SelectIfaceRequest, options?: RpcOptions): UnaryCall<SelectIfaceRequest, SelectIfaceResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<SelectIfaceRequest, SelectIfaceResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetSelectedIface
     */
    getSelectedIface(input: Empty, options?: RpcOptions): UnaryCall<Empty, GetSelectedIfaceResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, GetSelectedIfaceResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SendMessage
     */
    sendMessage(input: SendMessageRequest, options?: RpcOptions): UnaryCall<SendMessageRequest, SendMessageResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<SendMessageRequest, SendMessageResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SubscribeToEvents
     */
    subscribeToEvents(input: SubscribeToEventsRequest, options?: RpcOptions): ServerStreamingCall<SubscribeToEventsRequest, Event> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeToEventsRequest, Event>("serverStreaming", this._transport, method, opt, input);
    }
}
