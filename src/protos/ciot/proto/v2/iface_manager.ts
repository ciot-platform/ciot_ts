// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "ciot/proto/v2/iface_manager.proto" (package "Ciot", syntax proto3)
// tslint:disable
import { Event } from "./event";
import { Empty } from "../../../google/protobuf/empty";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { IfaceInfo } from "./iface";
import { Msg } from "./msg";
/**
 * @generated from protobuf message Ciot.IfacesList
 */
export interface IfacesList {
    /**
     * @generated from protobuf field: repeated Ciot.Msg items = 1
     */
    items: Msg[];
}
/**
 * @generated from protobuf message Ciot.CreateIfaceRequest
 */
export interface CreateIfaceRequest {
    /**
     * @generated from protobuf field: Ciot.Msg message = 1
     */
    message?: Msg;
}
/**
 * @generated from protobuf message Ciot.CreateIfaceResponse
 */
export interface CreateIfaceResponse {
    /**
     * @generated from protobuf field: Ciot.Msg message = 1
     */
    message?: Msg;
}
/**
 * @generated from protobuf message Ciot.GetIfaceRequest
 */
export interface GetIfaceRequest {
    /**
     * @generated from protobuf field: uint32 id = 1
     */
    id: number;
}
/**
 * @generated from protobuf message Ciot.GetIfaceResponse
 */
export interface GetIfaceResponse {
    /**
     * @generated from protobuf field: Ciot.Msg message = 1
     */
    message?: Msg;
}
/**
 * @generated from protobuf message Ciot.GetIfacesResponse
 */
export interface GetIfacesResponse {
    /**
     * @generated from protobuf field: repeated Ciot.Msg list = 1
     */
    list: Msg[];
}
/**
 * @generated from protobuf message Ciot.UpdateIfaceRequest
 */
export interface UpdateIfaceRequest {
    /**
     * @generated from protobuf field: Ciot.Msg message = 1
     */
    message?: Msg;
}
/**
 * @generated from protobuf message Ciot.UpdateIfaceResponse
 */
export interface UpdateIfaceResponse {
    /**
     * @generated from protobuf field: Ciot.Msg message = 1
     */
    message?: Msg;
}
/**
 * @generated from protobuf message Ciot.DeleteIfaceRequest
 */
export interface DeleteIfaceRequest {
    /**
     * @generated from protobuf field: uint32 id = 1
     */
    id: number;
}
/**
 * @generated from protobuf message Ciot.DeleteIfaceResponse
 */
export interface DeleteIfaceResponse {
    /**
     * @generated from protobuf field: Ciot.Msg message = 1
     */
    message?: Msg;
}
/**
 * @generated from protobuf message Ciot.SelectIfaceRequest
 */
export interface SelectIfaceRequest {
    /**
     * @generated from protobuf field: uint32 id = 1
     */
    id: number;
}
/**
 * @generated from protobuf message Ciot.SelectIfaceResponse
 */
export interface SelectIfaceResponse {
    /**
     * @generated from protobuf field: Ciot.IfaceInfo iface = 1
     */
    iface?: IfaceInfo;
}
/**
 * @generated from protobuf message Ciot.GetSelectedIfaceResponse
 */
export interface GetSelectedIfaceResponse {
    /**
     * @generated from protobuf field: Ciot.IfaceInfo iface = 1
     */
    iface?: IfaceInfo;
}
/**
 * @generated from protobuf message Ciot.SendMessageRequest
 */
export interface SendMessageRequest {
    /**
     * @generated from protobuf field: Ciot.Msg message = 1
     */
    message?: Msg;
}
/**
 * @generated from protobuf message Ciot.SendMessageResponse
 */
export interface SendMessageResponse {
    /**
     * @generated from protobuf field: Ciot.Msg message = 1
     */
    message?: Msg;
}
/**
 * @generated from protobuf message Ciot.SubscribeToEventsRequest
 */
export interface SubscribeToEventsRequest {
    /**
     * @generated from protobuf field: string id = 1
     */
    id: string;
    /**
     * @generated from protobuf field: Ciot.IfaceInfo iface = 2
     */
    iface?: IfaceInfo;
}
// @generated message type with reflection information, may provide speed optimized methods
class IfacesList$Type extends MessageType<IfacesList> {
    constructor() {
        super("Ciot.IfacesList", [
            { no: 1, name: "items", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Msg }
        ]);
    }
    create(value?: PartialMessage<IfacesList>): IfacesList {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.items = [];
        if (value !== undefined)
            reflectionMergePartial<IfacesList>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IfacesList): IfacesList {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Ciot.Msg items */ 1:
                    message.items.push(Msg.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IfacesList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Ciot.Msg items = 1; */
        for (let i = 0; i < message.items.length; i++)
            Msg.internalBinaryWrite(message.items[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.IfacesList
 */
export const IfacesList = new IfacesList$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateIfaceRequest$Type extends MessageType<CreateIfaceRequest> {
    constructor() {
        super("Ciot.CreateIfaceRequest", [
            { no: 1, name: "message", kind: "message", T: () => Msg }
        ]);
    }
    create(value?: PartialMessage<CreateIfaceRequest>): CreateIfaceRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateIfaceRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateIfaceRequest): CreateIfaceRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Ciot.Msg message */ 1:
                    message.message = Msg.internalBinaryRead(reader, reader.uint32(), options, message.message);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateIfaceRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Ciot.Msg message = 1; */
        if (message.message)
            Msg.internalBinaryWrite(message.message, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.CreateIfaceRequest
 */
export const CreateIfaceRequest = new CreateIfaceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateIfaceResponse$Type extends MessageType<CreateIfaceResponse> {
    constructor() {
        super("Ciot.CreateIfaceResponse", [
            { no: 1, name: "message", kind: "message", T: () => Msg }
        ]);
    }
    create(value?: PartialMessage<CreateIfaceResponse>): CreateIfaceResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateIfaceResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateIfaceResponse): CreateIfaceResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Ciot.Msg message */ 1:
                    message.message = Msg.internalBinaryRead(reader, reader.uint32(), options, message.message);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateIfaceResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Ciot.Msg message = 1; */
        if (message.message)
            Msg.internalBinaryWrite(message.message, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.CreateIfaceResponse
 */
export const CreateIfaceResponse = new CreateIfaceResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetIfaceRequest$Type extends MessageType<GetIfaceRequest> {
    constructor() {
        super("Ciot.GetIfaceRequest", [
            { no: 1, name: "id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetIfaceRequest>): GetIfaceRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        if (value !== undefined)
            reflectionMergePartial<GetIfaceRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetIfaceRequest): GetIfaceRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetIfaceRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.GetIfaceRequest
 */
export const GetIfaceRequest = new GetIfaceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetIfaceResponse$Type extends MessageType<GetIfaceResponse> {
    constructor() {
        super("Ciot.GetIfaceResponse", [
            { no: 1, name: "message", kind: "message", T: () => Msg }
        ]);
    }
    create(value?: PartialMessage<GetIfaceResponse>): GetIfaceResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetIfaceResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetIfaceResponse): GetIfaceResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Ciot.Msg message */ 1:
                    message.message = Msg.internalBinaryRead(reader, reader.uint32(), options, message.message);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetIfaceResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Ciot.Msg message = 1; */
        if (message.message)
            Msg.internalBinaryWrite(message.message, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.GetIfaceResponse
 */
export const GetIfaceResponse = new GetIfaceResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetIfacesResponse$Type extends MessageType<GetIfacesResponse> {
    constructor() {
        super("Ciot.GetIfacesResponse", [
            { no: 1, name: "list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Msg }
        ]);
    }
    create(value?: PartialMessage<GetIfacesResponse>): GetIfacesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.list = [];
        if (value !== undefined)
            reflectionMergePartial<GetIfacesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetIfacesResponse): GetIfacesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Ciot.Msg list */ 1:
                    message.list.push(Msg.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetIfacesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Ciot.Msg list = 1; */
        for (let i = 0; i < message.list.length; i++)
            Msg.internalBinaryWrite(message.list[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.GetIfacesResponse
 */
export const GetIfacesResponse = new GetIfacesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateIfaceRequest$Type extends MessageType<UpdateIfaceRequest> {
    constructor() {
        super("Ciot.UpdateIfaceRequest", [
            { no: 1, name: "message", kind: "message", T: () => Msg }
        ]);
    }
    create(value?: PartialMessage<UpdateIfaceRequest>): UpdateIfaceRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateIfaceRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateIfaceRequest): UpdateIfaceRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Ciot.Msg message */ 1:
                    message.message = Msg.internalBinaryRead(reader, reader.uint32(), options, message.message);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateIfaceRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Ciot.Msg message = 1; */
        if (message.message)
            Msg.internalBinaryWrite(message.message, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.UpdateIfaceRequest
 */
export const UpdateIfaceRequest = new UpdateIfaceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateIfaceResponse$Type extends MessageType<UpdateIfaceResponse> {
    constructor() {
        super("Ciot.UpdateIfaceResponse", [
            { no: 1, name: "message", kind: "message", T: () => Msg }
        ]);
    }
    create(value?: PartialMessage<UpdateIfaceResponse>): UpdateIfaceResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateIfaceResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateIfaceResponse): UpdateIfaceResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Ciot.Msg message */ 1:
                    message.message = Msg.internalBinaryRead(reader, reader.uint32(), options, message.message);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateIfaceResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Ciot.Msg message = 1; */
        if (message.message)
            Msg.internalBinaryWrite(message.message, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.UpdateIfaceResponse
 */
export const UpdateIfaceResponse = new UpdateIfaceResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteIfaceRequest$Type extends MessageType<DeleteIfaceRequest> {
    constructor() {
        super("Ciot.DeleteIfaceRequest", [
            { no: 1, name: "id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteIfaceRequest>): DeleteIfaceRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        if (value !== undefined)
            reflectionMergePartial<DeleteIfaceRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteIfaceRequest): DeleteIfaceRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteIfaceRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.DeleteIfaceRequest
 */
export const DeleteIfaceRequest = new DeleteIfaceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteIfaceResponse$Type extends MessageType<DeleteIfaceResponse> {
    constructor() {
        super("Ciot.DeleteIfaceResponse", [
            { no: 1, name: "message", kind: "message", T: () => Msg }
        ]);
    }
    create(value?: PartialMessage<DeleteIfaceResponse>): DeleteIfaceResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteIfaceResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteIfaceResponse): DeleteIfaceResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Ciot.Msg message */ 1:
                    message.message = Msg.internalBinaryRead(reader, reader.uint32(), options, message.message);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteIfaceResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Ciot.Msg message = 1; */
        if (message.message)
            Msg.internalBinaryWrite(message.message, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.DeleteIfaceResponse
 */
export const DeleteIfaceResponse = new DeleteIfaceResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SelectIfaceRequest$Type extends MessageType<SelectIfaceRequest> {
    constructor() {
        super("Ciot.SelectIfaceRequest", [
            { no: 1, name: "id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SelectIfaceRequest>): SelectIfaceRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        if (value !== undefined)
            reflectionMergePartial<SelectIfaceRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SelectIfaceRequest): SelectIfaceRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SelectIfaceRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.SelectIfaceRequest
 */
export const SelectIfaceRequest = new SelectIfaceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SelectIfaceResponse$Type extends MessageType<SelectIfaceResponse> {
    constructor() {
        super("Ciot.SelectIfaceResponse", [
            { no: 1, name: "iface", kind: "message", T: () => IfaceInfo }
        ]);
    }
    create(value?: PartialMessage<SelectIfaceResponse>): SelectIfaceResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SelectIfaceResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SelectIfaceResponse): SelectIfaceResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Ciot.IfaceInfo iface */ 1:
                    message.iface = IfaceInfo.internalBinaryRead(reader, reader.uint32(), options, message.iface);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SelectIfaceResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Ciot.IfaceInfo iface = 1; */
        if (message.iface)
            IfaceInfo.internalBinaryWrite(message.iface, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.SelectIfaceResponse
 */
export const SelectIfaceResponse = new SelectIfaceResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetSelectedIfaceResponse$Type extends MessageType<GetSelectedIfaceResponse> {
    constructor() {
        super("Ciot.GetSelectedIfaceResponse", [
            { no: 1, name: "iface", kind: "message", T: () => IfaceInfo }
        ]);
    }
    create(value?: PartialMessage<GetSelectedIfaceResponse>): GetSelectedIfaceResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetSelectedIfaceResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetSelectedIfaceResponse): GetSelectedIfaceResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Ciot.IfaceInfo iface */ 1:
                    message.iface = IfaceInfo.internalBinaryRead(reader, reader.uint32(), options, message.iface);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetSelectedIfaceResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Ciot.IfaceInfo iface = 1; */
        if (message.iface)
            IfaceInfo.internalBinaryWrite(message.iface, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.GetSelectedIfaceResponse
 */
export const GetSelectedIfaceResponse = new GetSelectedIfaceResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendMessageRequest$Type extends MessageType<SendMessageRequest> {
    constructor() {
        super("Ciot.SendMessageRequest", [
            { no: 1, name: "message", kind: "message", T: () => Msg }
        ]);
    }
    create(value?: PartialMessage<SendMessageRequest>): SendMessageRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SendMessageRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendMessageRequest): SendMessageRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Ciot.Msg message */ 1:
                    message.message = Msg.internalBinaryRead(reader, reader.uint32(), options, message.message);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendMessageRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Ciot.Msg message = 1; */
        if (message.message)
            Msg.internalBinaryWrite(message.message, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.SendMessageRequest
 */
export const SendMessageRequest = new SendMessageRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendMessageResponse$Type extends MessageType<SendMessageResponse> {
    constructor() {
        super("Ciot.SendMessageResponse", [
            { no: 1, name: "message", kind: "message", T: () => Msg }
        ]);
    }
    create(value?: PartialMessage<SendMessageResponse>): SendMessageResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SendMessageResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendMessageResponse): SendMessageResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Ciot.Msg message */ 1:
                    message.message = Msg.internalBinaryRead(reader, reader.uint32(), options, message.message);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendMessageResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Ciot.Msg message = 1; */
        if (message.message)
            Msg.internalBinaryWrite(message.message, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.SendMessageResponse
 */
export const SendMessageResponse = new SendMessageResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubscribeToEventsRequest$Type extends MessageType<SubscribeToEventsRequest> {
    constructor() {
        super("Ciot.SubscribeToEventsRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "iface", kind: "message", T: () => IfaceInfo }
        ]);
    }
    create(value?: PartialMessage<SubscribeToEventsRequest>): SubscribeToEventsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<SubscribeToEventsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscribeToEventsRequest): SubscribeToEventsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* Ciot.IfaceInfo iface */ 2:
                    message.iface = IfaceInfo.internalBinaryRead(reader, reader.uint32(), options, message.iface);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubscribeToEventsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* Ciot.IfaceInfo iface = 2; */
        if (message.iface)
            IfaceInfo.internalBinaryWrite(message.iface, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.SubscribeToEventsRequest
 */
export const SubscribeToEventsRequest = new SubscribeToEventsRequest$Type();
/**
 * @generated ServiceType for protobuf service Ciot.IfaceManagerService
 */
export const IfaceManagerService = new ServiceType("Ciot.IfaceManagerService", [
    { name: "CreateIface", options: {}, I: CreateIfaceRequest, O: CreateIfaceResponse },
    { name: "GetIface", options: {}, I: GetIfaceRequest, O: GetIfaceResponse },
    { name: "GetIfaces", options: {}, I: Empty, O: GetIfacesResponse },
    { name: "UpdateIface", options: {}, I: UpdateIfaceRequest, O: UpdateIfaceResponse },
    { name: "DeleteIface", options: {}, I: DeleteIfaceRequest, O: DeleteIfaceResponse },
    { name: "SelectIface", options: {}, I: SelectIfaceRequest, O: SelectIfaceResponse },
    { name: "GetSelectedIface", options: {}, I: Empty, O: GetSelectedIfaceResponse },
    { name: "SendMessage", options: {}, I: SendMessageRequest, O: SendMessageResponse },
    { name: "SubscribeToEvents", serverStreaming: true, options: {}, I: SubscribeToEventsRequest, O: Event }
]);
