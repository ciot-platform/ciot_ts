// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "ciot/proto/v2/mbus_server.proto" (package "Ciot", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { MbusFunctionReq } from "./mbus";
/**
 * Message used to stop Modbus server interface
 *
 * @generated from protobuf message Ciot.MbusServerStop
 */
export interface MbusServerStop {
}
/**
 * Message representing Modbus RTU configuration
 *
 * @generated from protobuf message Ciot.MbusServerRtuCfg
 */
export interface MbusServerRtuCfg {
    /**
     * @generated from protobuf field: uint32 server_id = 1
     */
    serverId: number; // Server ID
}
/**
 * Message representing Modbus TCP configuration
 *
 * @generated from protobuf message Ciot.MbusServerTcpCfg
 */
export interface MbusServerTcpCfg {
    /**
     * @generated from protobuf field: uint32 port = 1
     */
    port: number; // Server port
    /**
     * @generated from protobuf field: uint32 max_connections = 2
     */
    maxConnections: number; // Max simultaneos connections
}
/**
 * Message representing Modbus server configuration.
 *
 * @generated from protobuf message Ciot.MbusServerCfg
 */
export interface MbusServerCfg {
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "rtu";
        /**
         * @generated from protobuf field: Ciot.MbusServerRtuCfg rtu = 1
         */
        rtu: MbusServerRtuCfg; // Modbus RTU configuration
    } | {
        oneofKind: "tcp";
        /**
         * @generated from protobuf field: Ciot.MbusServerTcpCfg tcp = 2
         */
        tcp: MbusServerTcpCfg; // Modbus TCP configuration 
    } | {
        oneofKind: undefined;
    };
}
/**
 * Message representing Modbus server status.
 *
 * @generated from protobuf message Ciot.MbusServerStatus
 */
export interface MbusServerStatus {
    /**
     * @generated from protobuf field: Ciot.MbusServerState state = 1
     */
    state: MbusServerState; // State of the Modbus server.
}
/**
 * Message representing an Modbus server request.
 *
 * @generated from protobuf message Ciot.MbusServerReq
 */
export interface MbusServerReq {
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "function";
        /**
         * @generated from protobuf field: Ciot.MbusFunctionReq function = 1
         */
        function: MbusFunctionReq; // Function request
    } | {
        oneofKind: undefined;
    };
}
/**
 * Message representing Modbus server data.
 *
 * @generated from protobuf message Ciot.MbusServerData
 */
export interface MbusServerData {
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "stop";
        /**
         * @generated from protobuf field: Ciot.MbusServerStop stop = 1
         */
        stop: MbusServerStop; // Stop Modbus server.
    } | {
        oneofKind: "config";
        /**
         * @generated from protobuf field: Ciot.MbusServerCfg config = 2
         */
        config: MbusServerCfg; // Configuration for the Modbus server.
    } | {
        oneofKind: "status";
        /**
         * @generated from protobuf field: Ciot.MbusServerStatus status = 3
         */
        status: MbusServerStatus; // Status of the Modbus server.
    } | {
        oneofKind: "request";
        /**
         * @generated from protobuf field: Ciot.MbusServerReq request = 4
         */
        request: MbusServerReq; // Modbus server request data.
    } | {
        oneofKind: undefined;
    };
}
/**
 * Enum representing the state of the Modbus server.
 *
 * @generated from protobuf enum Ciot.MbusServerState
 */
export enum MbusServerState {
    /**
     * The Modbus server is stopped.
     *
     * @generated from protobuf enum value: MBUS_SERVER_STATE_STOPPED = 0;
     */
    STOPPED = 0,
    /**
     * The Modbus server is started.
     *
     * @generated from protobuf enum value: MBUS_SERVER_STATE_STARTED = 1;
     */
    STARTED = 1,
    /**
     * The Modbus server encountered an error.
     *
     * @generated from protobuf enum value: MBUS_SERVER_STATE_ERROR = 2;
     */
    ERROR = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class MbusServerStop$Type extends MessageType<MbusServerStop> {
    constructor() {
        super("Ciot.MbusServerStop", []);
    }
    create(value?: PartialMessage<MbusServerStop>): MbusServerStop {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<MbusServerStop>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MbusServerStop): MbusServerStop {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MbusServerStop, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.MbusServerStop
 */
export const MbusServerStop = new MbusServerStop$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MbusServerRtuCfg$Type extends MessageType<MbusServerRtuCfg> {
    constructor() {
        super("Ciot.MbusServerRtuCfg", [
            { no: 1, name: "server_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MbusServerRtuCfg>): MbusServerRtuCfg {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.serverId = 0;
        if (value !== undefined)
            reflectionMergePartial<MbusServerRtuCfg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MbusServerRtuCfg): MbusServerRtuCfg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 server_id */ 1:
                    message.serverId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MbusServerRtuCfg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 server_id = 1; */
        if (message.serverId !== 0)
            writer.tag(1, WireType.Varint).uint32(message.serverId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.MbusServerRtuCfg
 */
export const MbusServerRtuCfg = new MbusServerRtuCfg$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MbusServerTcpCfg$Type extends MessageType<MbusServerTcpCfg> {
    constructor() {
        super("Ciot.MbusServerTcpCfg", [
            { no: 1, name: "port", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "max_connections", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MbusServerTcpCfg>): MbusServerTcpCfg {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.port = 0;
        message.maxConnections = 0;
        if (value !== undefined)
            reflectionMergePartial<MbusServerTcpCfg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MbusServerTcpCfg): MbusServerTcpCfg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 port */ 1:
                    message.port = reader.uint32();
                    break;
                case /* uint32 max_connections */ 2:
                    message.maxConnections = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MbusServerTcpCfg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 port = 1; */
        if (message.port !== 0)
            writer.tag(1, WireType.Varint).uint32(message.port);
        /* uint32 max_connections = 2; */
        if (message.maxConnections !== 0)
            writer.tag(2, WireType.Varint).uint32(message.maxConnections);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.MbusServerTcpCfg
 */
export const MbusServerTcpCfg = new MbusServerTcpCfg$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MbusServerCfg$Type extends MessageType<MbusServerCfg> {
    constructor() {
        super("Ciot.MbusServerCfg", [
            { no: 1, name: "rtu", kind: "message", oneof: "type", T: () => MbusServerRtuCfg },
            { no: 2, name: "tcp", kind: "message", oneof: "type", T: () => MbusServerTcpCfg }
        ]);
    }
    create(value?: PartialMessage<MbusServerCfg>): MbusServerCfg {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<MbusServerCfg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MbusServerCfg): MbusServerCfg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Ciot.MbusServerRtuCfg rtu */ 1:
                    message.type = {
                        oneofKind: "rtu",
                        rtu: MbusServerRtuCfg.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).rtu)
                    };
                    break;
                case /* Ciot.MbusServerTcpCfg tcp */ 2:
                    message.type = {
                        oneofKind: "tcp",
                        tcp: MbusServerTcpCfg.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).tcp)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MbusServerCfg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Ciot.MbusServerRtuCfg rtu = 1; */
        if (message.type.oneofKind === "rtu")
            MbusServerRtuCfg.internalBinaryWrite(message.type.rtu, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* Ciot.MbusServerTcpCfg tcp = 2; */
        if (message.type.oneofKind === "tcp")
            MbusServerTcpCfg.internalBinaryWrite(message.type.tcp, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.MbusServerCfg
 */
export const MbusServerCfg = new MbusServerCfg$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MbusServerStatus$Type extends MessageType<MbusServerStatus> {
    constructor() {
        super("Ciot.MbusServerStatus", [
            { no: 1, name: "state", kind: "enum", T: () => ["Ciot.MbusServerState", MbusServerState, "MBUS_SERVER_STATE_"] }
        ]);
    }
    create(value?: PartialMessage<MbusServerStatus>): MbusServerStatus {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.state = 0;
        if (value !== undefined)
            reflectionMergePartial<MbusServerStatus>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MbusServerStatus): MbusServerStatus {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Ciot.MbusServerState state */ 1:
                    message.state = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MbusServerStatus, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Ciot.MbusServerState state = 1; */
        if (message.state !== 0)
            writer.tag(1, WireType.Varint).int32(message.state);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.MbusServerStatus
 */
export const MbusServerStatus = new MbusServerStatus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MbusServerReq$Type extends MessageType<MbusServerReq> {
    constructor() {
        super("Ciot.MbusServerReq", [
            { no: 1, name: "function", kind: "message", oneof: "type", T: () => MbusFunctionReq }
        ]);
    }
    create(value?: PartialMessage<MbusServerReq>): MbusServerReq {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<MbusServerReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MbusServerReq): MbusServerReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Ciot.MbusFunctionReq function */ 1:
                    message.type = {
                        oneofKind: "function",
                        function: MbusFunctionReq.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).function)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MbusServerReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Ciot.MbusFunctionReq function = 1; */
        if (message.type.oneofKind === "function")
            MbusFunctionReq.internalBinaryWrite(message.type.function, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.MbusServerReq
 */
export const MbusServerReq = new MbusServerReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MbusServerData$Type extends MessageType<MbusServerData> {
    constructor() {
        super("Ciot.MbusServerData", [
            { no: 1, name: "stop", kind: "message", oneof: "type", T: () => MbusServerStop },
            { no: 2, name: "config", kind: "message", oneof: "type", T: () => MbusServerCfg },
            { no: 3, name: "status", kind: "message", oneof: "type", T: () => MbusServerStatus },
            { no: 4, name: "request", kind: "message", oneof: "type", T: () => MbusServerReq }
        ]);
    }
    create(value?: PartialMessage<MbusServerData>): MbusServerData {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<MbusServerData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MbusServerData): MbusServerData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Ciot.MbusServerStop stop */ 1:
                    message.type = {
                        oneofKind: "stop",
                        stop: MbusServerStop.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).stop)
                    };
                    break;
                case /* Ciot.MbusServerCfg config */ 2:
                    message.type = {
                        oneofKind: "config",
                        config: MbusServerCfg.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).config)
                    };
                    break;
                case /* Ciot.MbusServerStatus status */ 3:
                    message.type = {
                        oneofKind: "status",
                        status: MbusServerStatus.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).status)
                    };
                    break;
                case /* Ciot.MbusServerReq request */ 4:
                    message.type = {
                        oneofKind: "request",
                        request: MbusServerReq.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).request)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MbusServerData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Ciot.MbusServerStop stop = 1; */
        if (message.type.oneofKind === "stop")
            MbusServerStop.internalBinaryWrite(message.type.stop, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* Ciot.MbusServerCfg config = 2; */
        if (message.type.oneofKind === "config")
            MbusServerCfg.internalBinaryWrite(message.type.config, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* Ciot.MbusServerStatus status = 3; */
        if (message.type.oneofKind === "status")
            MbusServerStatus.internalBinaryWrite(message.type.status, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* Ciot.MbusServerReq request = 4; */
        if (message.type.oneofKind === "request")
            MbusServerReq.internalBinaryWrite(message.type.request, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.MbusServerData
 */
export const MbusServerData = new MbusServerData$Type();
