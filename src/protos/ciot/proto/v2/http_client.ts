// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "ciot/proto/v2/http_client.proto" (package "Ciot", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Message used to stop HTTP client interface
 *
 * @generated from protobuf message Ciot.HttpClientStop
 */
export interface HttpClientStop {
}
/**
 * Message representing HTTP client configuration.
 *
 * @generated from protobuf message Ciot.HttpClientCfg
 */
export interface HttpClientCfg {
    /**
     * @generated from protobuf field: string url = 1
     */
    url: string; // URL for the HTTP request.
    /**
     * @generated from protobuf field: Ciot.HttpClientMethod method = 2
     */
    method: HttpClientMethod; // HTTP method to use.
    /**
     * @generated from protobuf field: Ciot.HttpClientTransportType transport = 3
     */
    transport: HttpClientTransportType; // Transport type for the HTTP request.
    /**
     * @generated from protobuf field: uint32 timeout = 4
     */
    timeout: number; // Timeout for the HTTP request.
}
/**
 * Message representing HTTP client status.
 *
 * @generated from protobuf message Ciot.HttpClientStatus
 */
export interface HttpClientStatus {
    /**
     * @generated from protobuf field: Ciot.HttpClientState state = 1
     */
    state: HttpClientState; // State of the HTTP client.
    /**
     * @generated from protobuf field: uint32 error = 2
     */
    error: number; // Error code, if any.
}
/**
 * Message representing data to be sent by the HTTP client.
 *
 * @generated from protobuf message Ciot.HttpClientReqSend
 */
export interface HttpClientReqSend {
    /**
     * @generated from protobuf field: Ciot.HttpClientCfg config = 1
     */
    config?: HttpClientCfg; // Configuration for the HTTP client.
    /**
     * @generated from protobuf field: bytes body = 2
     */
    body: Uint8Array; // Body of the HTTP request.
}
/**
 * Message representing setting a header for the HTTP client request.
 *
 * @generated from protobuf message Ciot.HttpClientReqSetHeader
 */
export interface HttpClientReqSetHeader {
    /**
     * @generated from protobuf field: string header = 1
     */
    header: string; // Header name.
    /**
     * @generated from protobuf field: string value = 2
     */
    value: string; // Header value.
}
/**
 * Message representing an HTTP client request.
 *
 * @generated from protobuf message Ciot.HttpClientReq
 */
export interface HttpClientReq {
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "send";
        /**
         * @generated from protobuf field: Ciot.HttpClientReqSend send = 1
         */
        send: HttpClientReqSend; // Data to be sent in the request.
    } | {
        oneofKind: "setHeader";
        /**
         * @generated from protobuf field: Ciot.HttpClientReqSetHeader set_header = 2
         */
        setHeader: HttpClientReqSetHeader; // Header to be set in the request.
    } | {
        oneofKind: undefined;
    };
}
/**
 * Message representing HTTP client data.
 *
 * @generated from protobuf message Ciot.HttpClientData
 */
export interface HttpClientData {
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "stop";
        /**
         * @generated from protobuf field: Ciot.HttpClientStop stop = 1
         */
        stop: HttpClientStop; // Stop HTTP client.
    } | {
        oneofKind: "config";
        /**
         * @generated from protobuf field: Ciot.HttpClientCfg config = 2
         */
        config: HttpClientCfg; // Configuration for the HTTP client.
    } | {
        oneofKind: "status";
        /**
         * @generated from protobuf field: Ciot.HttpClientStatus status = 3
         */
        status: HttpClientStatus; // Status of the HTTP client.
    } | {
        oneofKind: "request";
        /**
         * @generated from protobuf field: Ciot.HttpClientReq request = 4
         */
        request: HttpClientReq; // HTTP client request.
    } | {
        oneofKind: undefined;
    };
}
/**
 * Enum representing the state of the HTTP client.
 *
 * @generated from protobuf enum Ciot.HttpClientState
 */
export enum HttpClientState {
    /**
     * The HTTP client is idle.
     *
     * @generated from protobuf enum value: HTTP_CLIENT_STATE_IDLE = 0;
     */
    IDLE = 0,
    /**
     * The HTTP client has started.
     *
     * @generated from protobuf enum value: HTTP_CLIENT_STATE_STARTED = 1;
     */
    STARTED = 1,
    /**
     * The HTTP client is connecting.
     *
     * @generated from protobuf enum value: HTTP_CLIENT_STATE_CONNECTING = 2;
     */
    CONNECTING = 2,
    /**
     * The HTTP client is connected.
     *
     * @generated from protobuf enum value: HTTP_CLIENT_STATE_CONNECTED = 3;
     */
    CONNECTED = 3,
    /**
     * Data has been received by the HTTP client.
     *
     * @generated from protobuf enum value: HTTP_CLIENT_STATE_DATA_RECEIVED = 4;
     */
    DATA_RECEIVED = 4,
    /**
     * The HTTP client has timed out.
     *
     * @generated from protobuf enum value: HTTP_CLIENT_STATE_TIMEOUT = 5;
     */
    TIMEOUT = 5,
    /**
     * The HTTP client encountered an error.
     *
     * @generated from protobuf enum value: HTTP_CLIENT_STATE_ERROR = 6;
     */
    ERROR = 6
}
/**
 * Enum representing different HTTP methods.
 *
 * @generated from protobuf enum Ciot.HttpClientMethod
 */
export enum HttpClientMethod {
    /**
     * HTTP GET method.
     *
     * @generated from protobuf enum value: HTTP_METHOD_GET = 0;
     */
    HTTP_METHOD_GET = 0,
    /**
     * HTTP POST method.
     *
     * @generated from protobuf enum value: HTTP_METHOD_POST = 1;
     */
    HTTP_METHOD_POST = 1,
    /**
     * HTTP PUT method.
     *
     * @generated from protobuf enum value: HTTP_METHOD_PUT = 2;
     */
    HTTP_METHOD_PUT = 2,
    /**
     * HTTP PATCH method.
     *
     * @generated from protobuf enum value: HTTP_METHOD_PATCH = 3;
     */
    HTTP_METHOD_PATCH = 3,
    /**
     * HTTP DELETE method.
     *
     * @generated from protobuf enum value: HTTP_METHOD_DELETE = 4;
     */
    HTTP_METHOD_DELETE = 4,
    /**
     * HTTP HEAD method.
     *
     * @generated from protobuf enum value: HTTP_METHOD_HEAD = 5;
     */
    HTTP_METHOD_HEAD = 5,
    /**
     * HTTP NOTIFY method.
     *
     * @generated from protobuf enum value: HTTP_METHOD_NOTIFY = 6;
     */
    HTTP_METHOD_NOTIFY = 6,
    /**
     * HTTP SUBSCRIBE method.
     *
     * @generated from protobuf enum value: HTTP_METHOD_SUBSCRIBE = 7;
     */
    HTTP_METHOD_SUBSCRIBE = 7,
    /**
     * HTTP UNSUBSCRIBE method.
     *
     * @generated from protobuf enum value: HTTP_METHOD_UNSUBSCRIBE = 8;
     */
    HTTP_METHOD_UNSUBSCRIBE = 8,
    /**
     * HTTP OPTIONS method.
     *
     * @generated from protobuf enum value: HTTP_METHOD_OPTIONS = 9;
     */
    HTTP_METHOD_OPTIONS = 9,
    /**
     * HTTP COPY method.
     *
     * @generated from protobuf enum value: HTTP_METHOD_COPY = 10;
     */
    HTTP_METHOD_COPY = 10,
    /**
     * HTTP MOVE method.
     *
     * @generated from protobuf enum value: HTTP_METHOD_MOVE = 11;
     */
    HTTP_METHOD_MOVE = 11,
    /**
     * HTTP LOCK method.
     *
     * @generated from protobuf enum value: HTTP_METHOD_LOCK = 12;
     */
    HTTP_METHOD_LOCK = 12,
    /**
     * HTTP UNLOCK method.
     *
     * @generated from protobuf enum value: HTTP_METHOD_UNLOCK = 13;
     */
    HTTP_METHOD_UNLOCK = 13,
    /**
     * HTTP PROPFIND method.
     *
     * @generated from protobuf enum value: HTTP_METHOD_PROPFIND = 14;
     */
    HTTP_METHOD_PROPFIND = 14,
    /**
     * HTTP PROPPATCH method.
     *
     * @generated from protobuf enum value: HTTP_METHOD_PROPPATCH = 15;
     */
    HTTP_METHOD_PROPPATCH = 15,
    /**
     * HTTP MKCOL method.
     *
     * @generated from protobuf enum value: HTTP_METHOD_MKCOL = 16;
     */
    HTTP_METHOD_MKCOL = 16,
    /**
     * Maximum value for HTTP methods.
     *
     * @generated from protobuf enum value: HTTP_METHOD_MAX = 17;
     */
    HTTP_METHOD_MAX = 17
}
/**
 * Enum representing different HTTP transport types.
 *
 * @generated from protobuf enum Ciot.HttpClientTransportType
 */
export enum HttpClientTransportType {
    /**
     * Unknown transport type.
     *
     * @generated from protobuf enum value: HTTP_TRANSPORT_UNKNOWN = 0;
     */
    HTTP_TRANSPORT_UNKNOWN = 0,
    /**
     * TCP transport.
     *
     * @generated from protobuf enum value: HTTP_TRANSPORT_TCP = 1;
     */
    HTTP_TRANSPORT_TCP = 1,
    /**
     * SSL transport.
     *
     * @generated from protobuf enum value: HTTP_TRANSPORT_SSL = 2;
     */
    HTTP_TRANSPORT_SSL = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class HttpClientStop$Type extends MessageType<HttpClientStop> {
    constructor() {
        super("Ciot.HttpClientStop", []);
    }
    create(value?: PartialMessage<HttpClientStop>): HttpClientStop {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<HttpClientStop>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HttpClientStop): HttpClientStop {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HttpClientStop, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.HttpClientStop
 */
export const HttpClientStop = new HttpClientStop$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HttpClientCfg$Type extends MessageType<HttpClientCfg> {
    constructor() {
        super("Ciot.HttpClientCfg", [
            { no: 1, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "method", kind: "enum", T: () => ["Ciot.HttpClientMethod", HttpClientMethod] },
            { no: 3, name: "transport", kind: "enum", T: () => ["Ciot.HttpClientTransportType", HttpClientTransportType] },
            { no: 4, name: "timeout", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<HttpClientCfg>): HttpClientCfg {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.url = "";
        message.method = 0;
        message.transport = 0;
        message.timeout = 0;
        if (value !== undefined)
            reflectionMergePartial<HttpClientCfg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HttpClientCfg): HttpClientCfg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string url */ 1:
                    message.url = reader.string();
                    break;
                case /* Ciot.HttpClientMethod method */ 2:
                    message.method = reader.int32();
                    break;
                case /* Ciot.HttpClientTransportType transport */ 3:
                    message.transport = reader.int32();
                    break;
                case /* uint32 timeout */ 4:
                    message.timeout = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HttpClientCfg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string url = 1; */
        if (message.url !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.url);
        /* Ciot.HttpClientMethod method = 2; */
        if (message.method !== 0)
            writer.tag(2, WireType.Varint).int32(message.method);
        /* Ciot.HttpClientTransportType transport = 3; */
        if (message.transport !== 0)
            writer.tag(3, WireType.Varint).int32(message.transport);
        /* uint32 timeout = 4; */
        if (message.timeout !== 0)
            writer.tag(4, WireType.Varint).uint32(message.timeout);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.HttpClientCfg
 */
export const HttpClientCfg = new HttpClientCfg$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HttpClientStatus$Type extends MessageType<HttpClientStatus> {
    constructor() {
        super("Ciot.HttpClientStatus", [
            { no: 1, name: "state", kind: "enum", T: () => ["Ciot.HttpClientState", HttpClientState, "HTTP_CLIENT_STATE_"] },
            { no: 2, name: "error", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<HttpClientStatus>): HttpClientStatus {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.state = 0;
        message.error = 0;
        if (value !== undefined)
            reflectionMergePartial<HttpClientStatus>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HttpClientStatus): HttpClientStatus {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Ciot.HttpClientState state */ 1:
                    message.state = reader.int32();
                    break;
                case /* uint32 error */ 2:
                    message.error = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HttpClientStatus, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Ciot.HttpClientState state = 1; */
        if (message.state !== 0)
            writer.tag(1, WireType.Varint).int32(message.state);
        /* uint32 error = 2; */
        if (message.error !== 0)
            writer.tag(2, WireType.Varint).uint32(message.error);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.HttpClientStatus
 */
export const HttpClientStatus = new HttpClientStatus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HttpClientReqSend$Type extends MessageType<HttpClientReqSend> {
    constructor() {
        super("Ciot.HttpClientReqSend", [
            { no: 1, name: "config", kind: "message", T: () => HttpClientCfg },
            { no: 2, name: "body", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<HttpClientReqSend>): HttpClientReqSend {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.body = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<HttpClientReqSend>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HttpClientReqSend): HttpClientReqSend {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Ciot.HttpClientCfg config */ 1:
                    message.config = HttpClientCfg.internalBinaryRead(reader, reader.uint32(), options, message.config);
                    break;
                case /* bytes body */ 2:
                    message.body = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HttpClientReqSend, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Ciot.HttpClientCfg config = 1; */
        if (message.config)
            HttpClientCfg.internalBinaryWrite(message.config, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bytes body = 2; */
        if (message.body.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.body);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.HttpClientReqSend
 */
export const HttpClientReqSend = new HttpClientReqSend$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HttpClientReqSetHeader$Type extends MessageType<HttpClientReqSetHeader> {
    constructor() {
        super("Ciot.HttpClientReqSetHeader", [
            { no: 1, name: "header", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<HttpClientReqSetHeader>): HttpClientReqSetHeader {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.header = "";
        message.value = "";
        if (value !== undefined)
            reflectionMergePartial<HttpClientReqSetHeader>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HttpClientReqSetHeader): HttpClientReqSetHeader {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string header */ 1:
                    message.header = reader.string();
                    break;
                case /* string value */ 2:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HttpClientReqSetHeader, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string header = 1; */
        if (message.header !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.header);
        /* string value = 2; */
        if (message.value !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.HttpClientReqSetHeader
 */
export const HttpClientReqSetHeader = new HttpClientReqSetHeader$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HttpClientReq$Type extends MessageType<HttpClientReq> {
    constructor() {
        super("Ciot.HttpClientReq", [
            { no: 1, name: "send", kind: "message", oneof: "type", T: () => HttpClientReqSend },
            { no: 2, name: "set_header", kind: "message", oneof: "type", T: () => HttpClientReqSetHeader }
        ]);
    }
    create(value?: PartialMessage<HttpClientReq>): HttpClientReq {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<HttpClientReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HttpClientReq): HttpClientReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Ciot.HttpClientReqSend send */ 1:
                    message.type = {
                        oneofKind: "send",
                        send: HttpClientReqSend.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).send)
                    };
                    break;
                case /* Ciot.HttpClientReqSetHeader set_header */ 2:
                    message.type = {
                        oneofKind: "setHeader",
                        setHeader: HttpClientReqSetHeader.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).setHeader)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HttpClientReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Ciot.HttpClientReqSend send = 1; */
        if (message.type.oneofKind === "send")
            HttpClientReqSend.internalBinaryWrite(message.type.send, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* Ciot.HttpClientReqSetHeader set_header = 2; */
        if (message.type.oneofKind === "setHeader")
            HttpClientReqSetHeader.internalBinaryWrite(message.type.setHeader, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.HttpClientReq
 */
export const HttpClientReq = new HttpClientReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HttpClientData$Type extends MessageType<HttpClientData> {
    constructor() {
        super("Ciot.HttpClientData", [
            { no: 1, name: "stop", kind: "message", oneof: "type", T: () => HttpClientStop },
            { no: 2, name: "config", kind: "message", oneof: "type", T: () => HttpClientCfg },
            { no: 3, name: "status", kind: "message", oneof: "type", T: () => HttpClientStatus },
            { no: 4, name: "request", kind: "message", oneof: "type", T: () => HttpClientReq }
        ]);
    }
    create(value?: PartialMessage<HttpClientData>): HttpClientData {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<HttpClientData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HttpClientData): HttpClientData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Ciot.HttpClientStop stop */ 1:
                    message.type = {
                        oneofKind: "stop",
                        stop: HttpClientStop.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).stop)
                    };
                    break;
                case /* Ciot.HttpClientCfg config */ 2:
                    message.type = {
                        oneofKind: "config",
                        config: HttpClientCfg.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).config)
                    };
                    break;
                case /* Ciot.HttpClientStatus status */ 3:
                    message.type = {
                        oneofKind: "status",
                        status: HttpClientStatus.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).status)
                    };
                    break;
                case /* Ciot.HttpClientReq request */ 4:
                    message.type = {
                        oneofKind: "request",
                        request: HttpClientReq.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).request)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HttpClientData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Ciot.HttpClientStop stop = 1; */
        if (message.type.oneofKind === "stop")
            HttpClientStop.internalBinaryWrite(message.type.stop, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* Ciot.HttpClientCfg config = 2; */
        if (message.type.oneofKind === "config")
            HttpClientCfg.internalBinaryWrite(message.type.config, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* Ciot.HttpClientStatus status = 3; */
        if (message.type.oneofKind === "status")
            HttpClientStatus.internalBinaryWrite(message.type.status, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* Ciot.HttpClientReq request = 4; */
        if (message.type.oneofKind === "request")
            HttpClientReq.internalBinaryWrite(message.type.request, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.HttpClientData
 */
export const HttpClientData = new HttpClientData$Type();
