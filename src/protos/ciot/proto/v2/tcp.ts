// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "ciot/proto/v2/tcp.proto" (package "Ciot", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Stop TCP interface
 *
 * @generated from protobuf message Ciot.TcpStop
 */
export interface TcpStop {
}
/**
 * Message representing configuration for the TCP module.
 *
 * @generated from protobuf message Ciot.TcpCfg
 */
export interface TcpCfg {
    /**
     * @generated from protobuf field: bool disabled = 1
     */
    disabled: boolean; // Disable TCP interface
    /**
     * @generated from protobuf field: Ciot.TcpDhcpCfg dhcp = 2
     */
    dhcp: TcpDhcpCfg; // DHCP configuration.
    /**
     * @generated from protobuf field: bytes ip = 3
     */
    ip: Uint8Array; // IP address.
    /**
     * @generated from protobuf field: bytes gateway = 4
     */
    gateway: Uint8Array; // Gateway address.
    /**
     * @generated from protobuf field: bytes mask = 5
     */
    mask: Uint8Array; // Subnet mask.
    /**
     * @generated from protobuf field: bytes dns = 6
     */
    dns: Uint8Array; // DNS address.
}
/**
 * Message representing DHCP status for the TCP module.
 *
 * @generated from protobuf message Ciot.TcpDhcpStatus
 */
export interface TcpDhcpStatus {
    /**
     * @generated from protobuf field: Ciot.TcpDhcpState client = 1
     */
    client: TcpDhcpState; // DHCP client status.
    /**
     * @generated from protobuf field: Ciot.TcpDhcpState server = 2
     */
    server: TcpDhcpState; // DHCP server status.
}
/**
 * Message representing TCP information.
 *
 * @generated from protobuf message Ciot.TcpInfo
 */
export interface TcpInfo {
    /**
     * @generated from protobuf field: bytes mac = 1
     */
    mac: Uint8Array; // MAC address.
    /**
     * @generated from protobuf field: bytes ip = 2
     */
    ip: Uint8Array; // IP address.
}
/**
 * Message representing status for the TCP module.
 *
 * @generated from protobuf message Ciot.TcpStatus
 */
export interface TcpStatus {
    /**
     * @generated from protobuf field: Ciot.TcpState state = 1
     */
    state: TcpState; // State of the TCP module.
    /**
     * @generated from protobuf field: uint32 conn_count = 2
     */
    connCount: number; // Connection count.
    /**
     * @generated from protobuf field: Ciot.TcpDhcpStatus dhcp = 3
     */
    dhcp?: TcpDhcpStatus; // DHCP status.
}
/**
 * Message representing a TCP request.
 *
 * @generated from protobuf message Ciot.TcpReq
 */
export interface TcpReq {
}
/**
 * Message representing data for the TCP module.
 *
 * @generated from protobuf message Ciot.TcpData
 */
export interface TcpData {
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "stop";
        /**
         * @generated from protobuf field: Ciot.TcpStop stop = 1
         */
        stop: TcpStop;
    } | {
        oneofKind: "config";
        /**
         * @generated from protobuf field: Ciot.TcpCfg config = 2
         */
        config: TcpCfg; // Configuration for the TCP module.
    } | {
        oneofKind: "status";
        /**
         * @generated from protobuf field: Ciot.TcpStatus status = 3
         */
        status: TcpStatus; // Status of the TCP module.
    } | {
        oneofKind: "request";
        /**
         * @generated from protobuf field: Ciot.TcpReq request = 4
         */
        request: TcpReq; // TCP request data.
    } | {
        oneofKind: "info";
        /**
         * @generated from protobuf field: Ciot.TcpInfo info = 6
         */
        info: TcpInfo; // TCP information.
    } | {
        oneofKind: undefined;
    };
}
/**
 * Enum representing the state of the TCP module.
 *
 * @generated from protobuf enum Ciot.TcpState
 */
export enum TcpState {
    /**
     * TCP module is stopped.
     *
     * @generated from protobuf enum value: TCP_STATE_STOPPED = 0;
     */
    STOPPED = 0,
    /**
     * TCP module is started.
     *
     * @generated from protobuf enum value: TCP_STATE_STARTED = 1;
     */
    STARTED = 1,
    /**
     * TCP module is disconnecting.
     *
     * @generated from protobuf enum value: TCP_STATE_DISCONNECTING = 2;
     */
    DISCONNECTING = 2,
    /**
     * TCP module is disconnected.
     *
     * @generated from protobuf enum value: TCP_STATE_DISCONNECTED = 3;
     */
    DISCONNECTED = 3,
    /**
     * TCP module is connecting.
     *
     * @generated from protobuf enum value: TCP_STATE_CONNECTING = 4;
     */
    CONNECTING = 4,
    /**
     * TCP module is connected.
     *
     * @generated from protobuf enum value: TCP_STATE_CONNECTED = 5;
     */
    CONNECTED = 5,
    /**
     * TCP module encountered an error.
     *
     * @generated from protobuf enum value: TCP_STATE_ERROR = 6;
     */
    ERROR = 6
}
/**
 * Enum representing the state of the TCP DHCP (Dynamic Host Configuration
 * Protocol).
 *
 * @generated from protobuf enum Ciot.TcpDhcpState
 */
export enum TcpDhcpState {
    /**
     * TCP DHCP is idle.
     *
     * @generated from protobuf enum value: TCP_DHCP_STATE_IDLE = 0;
     */
    IDLE = 0,
    /**
     * TCP DHCP is started.
     *
     * @generated from protobuf enum value: TCP_DHCP_STATE_STARTED = 1;
     */
    STARTED = 1,
    /**
     * TCP DHCP is stopped.
     *
     * @generated from protobuf enum value: TCP_DHCP_STATE_STOPPED = 2;
     */
    STOPPED = 2
}
/**
 * Enum representing different TCP DHCP configurations.
 *
 * @generated from protobuf enum Ciot.TcpDhcpCfg
 */
export enum TcpDhcpCfg {
    /**
     * No change in DHCP configuration.
     *
     * @generated from protobuf enum value: TCP_DHCP_CFG_NO_CHANGE = 0;
     */
    NO_CHANGE = 0,
    /**
     * Configure as DHCP client.
     *
     * @generated from protobuf enum value: TCP_DHCP_CFG_CLIENT = 1;
     */
    CLIENT = 1,
    /**
     * Configure as DHCP server.
     *
     * @generated from protobuf enum value: TCP_DHCP_CFG_SERVER = 2;
     */
    SERVER = 2,
    /**
     * Disable DHCP.
     *
     * @generated from protobuf enum value: TCP_DHCP_CFG_DISABLED = 3;
     */
    DISABLED = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class TcpStop$Type extends MessageType<TcpStop> {
    constructor() {
        super("Ciot.TcpStop", []);
    }
    create(value?: PartialMessage<TcpStop>): TcpStop {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TcpStop>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TcpStop): TcpStop {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TcpStop, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.TcpStop
 */
export const TcpStop = new TcpStop$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TcpCfg$Type extends MessageType<TcpCfg> {
    constructor() {
        super("Ciot.TcpCfg", [
            { no: 1, name: "disabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "dhcp", kind: "enum", T: () => ["Ciot.TcpDhcpCfg", TcpDhcpCfg, "TCP_DHCP_CFG_"] },
            { no: 3, name: "ip", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 4, name: "gateway", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 5, name: "mask", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 6, name: "dns", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<TcpCfg>): TcpCfg {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.disabled = false;
        message.dhcp = 0;
        message.ip = new Uint8Array(0);
        message.gateway = new Uint8Array(0);
        message.mask = new Uint8Array(0);
        message.dns = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<TcpCfg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TcpCfg): TcpCfg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool disabled */ 1:
                    message.disabled = reader.bool();
                    break;
                case /* Ciot.TcpDhcpCfg dhcp */ 2:
                    message.dhcp = reader.int32();
                    break;
                case /* bytes ip */ 3:
                    message.ip = reader.bytes();
                    break;
                case /* bytes gateway */ 4:
                    message.gateway = reader.bytes();
                    break;
                case /* bytes mask */ 5:
                    message.mask = reader.bytes();
                    break;
                case /* bytes dns */ 6:
                    message.dns = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TcpCfg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool disabled = 1; */
        if (message.disabled !== false)
            writer.tag(1, WireType.Varint).bool(message.disabled);
        /* Ciot.TcpDhcpCfg dhcp = 2; */
        if (message.dhcp !== 0)
            writer.tag(2, WireType.Varint).int32(message.dhcp);
        /* bytes ip = 3; */
        if (message.ip.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.ip);
        /* bytes gateway = 4; */
        if (message.gateway.length)
            writer.tag(4, WireType.LengthDelimited).bytes(message.gateway);
        /* bytes mask = 5; */
        if (message.mask.length)
            writer.tag(5, WireType.LengthDelimited).bytes(message.mask);
        /* bytes dns = 6; */
        if (message.dns.length)
            writer.tag(6, WireType.LengthDelimited).bytes(message.dns);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.TcpCfg
 */
export const TcpCfg = new TcpCfg$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TcpDhcpStatus$Type extends MessageType<TcpDhcpStatus> {
    constructor() {
        super("Ciot.TcpDhcpStatus", [
            { no: 1, name: "client", kind: "enum", T: () => ["Ciot.TcpDhcpState", TcpDhcpState, "TCP_DHCP_STATE_"] },
            { no: 2, name: "server", kind: "enum", T: () => ["Ciot.TcpDhcpState", TcpDhcpState, "TCP_DHCP_STATE_"] }
        ]);
    }
    create(value?: PartialMessage<TcpDhcpStatus>): TcpDhcpStatus {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.client = 0;
        message.server = 0;
        if (value !== undefined)
            reflectionMergePartial<TcpDhcpStatus>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TcpDhcpStatus): TcpDhcpStatus {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Ciot.TcpDhcpState client */ 1:
                    message.client = reader.int32();
                    break;
                case /* Ciot.TcpDhcpState server */ 2:
                    message.server = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TcpDhcpStatus, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Ciot.TcpDhcpState client = 1; */
        if (message.client !== 0)
            writer.tag(1, WireType.Varint).int32(message.client);
        /* Ciot.TcpDhcpState server = 2; */
        if (message.server !== 0)
            writer.tag(2, WireType.Varint).int32(message.server);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.TcpDhcpStatus
 */
export const TcpDhcpStatus = new TcpDhcpStatus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TcpInfo$Type extends MessageType<TcpInfo> {
    constructor() {
        super("Ciot.TcpInfo", [
            { no: 1, name: "mac", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "ip", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<TcpInfo>): TcpInfo {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.mac = new Uint8Array(0);
        message.ip = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<TcpInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TcpInfo): TcpInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes mac */ 1:
                    message.mac = reader.bytes();
                    break;
                case /* bytes ip */ 2:
                    message.ip = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TcpInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes mac = 1; */
        if (message.mac.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.mac);
        /* bytes ip = 2; */
        if (message.ip.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.ip);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.TcpInfo
 */
export const TcpInfo = new TcpInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TcpStatus$Type extends MessageType<TcpStatus> {
    constructor() {
        super("Ciot.TcpStatus", [
            { no: 1, name: "state", kind: "enum", T: () => ["Ciot.TcpState", TcpState, "TCP_STATE_"] },
            { no: 2, name: "conn_count", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "dhcp", kind: "message", T: () => TcpDhcpStatus }
        ]);
    }
    create(value?: PartialMessage<TcpStatus>): TcpStatus {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.state = 0;
        message.connCount = 0;
        if (value !== undefined)
            reflectionMergePartial<TcpStatus>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TcpStatus): TcpStatus {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Ciot.TcpState state */ 1:
                    message.state = reader.int32();
                    break;
                case /* uint32 conn_count */ 2:
                    message.connCount = reader.uint32();
                    break;
                case /* Ciot.TcpDhcpStatus dhcp */ 3:
                    message.dhcp = TcpDhcpStatus.internalBinaryRead(reader, reader.uint32(), options, message.dhcp);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TcpStatus, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Ciot.TcpState state = 1; */
        if (message.state !== 0)
            writer.tag(1, WireType.Varint).int32(message.state);
        /* uint32 conn_count = 2; */
        if (message.connCount !== 0)
            writer.tag(2, WireType.Varint).uint32(message.connCount);
        /* Ciot.TcpDhcpStatus dhcp = 3; */
        if (message.dhcp)
            TcpDhcpStatus.internalBinaryWrite(message.dhcp, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.TcpStatus
 */
export const TcpStatus = new TcpStatus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TcpReq$Type extends MessageType<TcpReq> {
    constructor() {
        super("Ciot.TcpReq", []);
    }
    create(value?: PartialMessage<TcpReq>): TcpReq {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TcpReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TcpReq): TcpReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TcpReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.TcpReq
 */
export const TcpReq = new TcpReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TcpData$Type extends MessageType<TcpData> {
    constructor() {
        super("Ciot.TcpData", [
            { no: 1, name: "stop", kind: "message", oneof: "type", T: () => TcpStop },
            { no: 2, name: "config", kind: "message", oneof: "type", T: () => TcpCfg },
            { no: 3, name: "status", kind: "message", oneof: "type", T: () => TcpStatus },
            { no: 4, name: "request", kind: "message", oneof: "type", T: () => TcpReq },
            { no: 6, name: "info", kind: "message", oneof: "type", T: () => TcpInfo }
        ]);
    }
    create(value?: PartialMessage<TcpData>): TcpData {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<TcpData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TcpData): TcpData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Ciot.TcpStop stop */ 1:
                    message.type = {
                        oneofKind: "stop",
                        stop: TcpStop.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).stop)
                    };
                    break;
                case /* Ciot.TcpCfg config */ 2:
                    message.type = {
                        oneofKind: "config",
                        config: TcpCfg.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).config)
                    };
                    break;
                case /* Ciot.TcpStatus status */ 3:
                    message.type = {
                        oneofKind: "status",
                        status: TcpStatus.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).status)
                    };
                    break;
                case /* Ciot.TcpReq request */ 4:
                    message.type = {
                        oneofKind: "request",
                        request: TcpReq.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).request)
                    };
                    break;
                case /* Ciot.TcpInfo info */ 6:
                    message.type = {
                        oneofKind: "info",
                        info: TcpInfo.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).info)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TcpData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Ciot.TcpStop stop = 1; */
        if (message.type.oneofKind === "stop")
            TcpStop.internalBinaryWrite(message.type.stop, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* Ciot.TcpCfg config = 2; */
        if (message.type.oneofKind === "config")
            TcpCfg.internalBinaryWrite(message.type.config, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* Ciot.TcpStatus status = 3; */
        if (message.type.oneofKind === "status")
            TcpStatus.internalBinaryWrite(message.type.status, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* Ciot.TcpReq request = 4; */
        if (message.type.oneofKind === "request")
            TcpReq.internalBinaryWrite(message.type.request, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* Ciot.TcpInfo info = 6; */
        if (message.type.oneofKind === "info")
            TcpInfo.internalBinaryWrite(message.type.info, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.TcpData
 */
export const TcpData = new TcpData$Type();
