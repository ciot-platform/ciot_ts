// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "ciot/proto/v2/logger.proto" (package "Ciot", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message Ciot.LogData
 */
export interface LogData {
    /**
     * @generated from protobuf field: Ciot.LogLevel level = 1
     */
    level: LogLevel;
    /**
     * @generated from protobuf field: string tag = 2
     */
    tag: string;
    /**
     * @generated from protobuf field: string message = 3
     */
    message: string;
}
/**
 * @generated from protobuf enum Ciot.LogLevel
 */
export enum LogLevel {
    /**
     * @generated from protobuf enum value: LOG_LEVEL_NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: LOG_LEVEL_ERROR = 1;
     */
    ERROR = 1,
    /**
     * @generated from protobuf enum value: LOG_LEVEL_WARNING = 2;
     */
    WARNING = 2,
    /**
     * @generated from protobuf enum value: LOG_LEVEL_INFO = 3;
     */
    INFO = 3,
    /**
     * @generated from protobuf enum value: LOG_LEVEL_VERBOSE = 4;
     */
    VERBOSE = 4,
    /**
     * @generated from protobuf enum value: LOG_LEVEL_DEBUG = 5;
     */
    DEBUG = 5
}
// @generated message type with reflection information, may provide speed optimized methods
class LogData$Type extends MessageType<LogData> {
    constructor() {
        super("Ciot.LogData", [
            { no: 1, name: "level", kind: "enum", T: () => ["Ciot.LogLevel", LogLevel, "LOG_LEVEL_"] },
            { no: 2, name: "tag", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LogData>): LogData {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.level = 0;
        message.tag = "";
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<LogData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LogData): LogData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Ciot.LogLevel level */ 1:
                    message.level = reader.int32();
                    break;
                case /* string tag */ 2:
                    message.tag = reader.string();
                    break;
                case /* string message */ 3:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LogData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Ciot.LogLevel level = 1; */
        if (message.level !== 0)
            writer.tag(1, WireType.Varint).int32(message.level);
        /* string tag = 2; */
        if (message.tag !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.tag);
        /* string message = 3; */
        if (message.message !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.LogData
 */
export const LogData = new LogData$Type();
