// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "ciot/proto/v2/ble_adv.proto" (package "Ciot", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Ble adv stop message
 *
 * @generated from protobuf message Ciot.BleAdvStop
 */
export interface BleAdvStop {
}
/**
 * Ble adv configuration
 *
 * @generated from protobuf message Ciot.BleAdvCfg
 */
export interface BleAdvCfg {
    /**
     * @generated from protobuf field: uint32 interval = 1
     */
    interval: number; // Advertising interval
    /**
     * @generated from protobuf field: uint32 duration = 2
     */
    duration: number; // Advertising duration
    /**
     * @generated from protobuf field: uint32 type = 3
     */
    type: number; // Advertising type
    /**
     * @generated from protobuf field: uint32 filter_policy = 4
     */
    filterPolicy: number; // Advertising filter policy
    /**
     * @generated from protobuf field: uint32 tx_power = 5
     */
    txPower: number; // Advertising tx power
}
/**
 * Ble adv status
 *
 * @generated from protobuf message Ciot.BleAdvStatus
 */
export interface BleAdvStatus {
    /**
     * @generated from protobuf field: Ciot.BleAdvState state = 1
     */
    state: BleAdvState;
    /**
     * @generated from protobuf field: uint32 err_code = 2
     */
    errCode: number;
}
/**
 * Ble adv request
 *
 * @generated from protobuf message Ciot.BleAdvReq
 */
export interface BleAdvReq {
}
/**
 * Ble adv data
 *
 * @generated from protobuf message Ciot.BleAdvData
 */
export interface BleAdvData {
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "stop";
        /**
         * @generated from protobuf field: Ciot.BleAdvStop stop = 1
         */
        stop: BleAdvStop; // Stop BLE adv interface.
    } | {
        oneofKind: "config";
        /**
         * @generated from protobuf field: Ciot.BleAdvCfg config = 2
         */
        config: BleAdvCfg; // BLE adv interface configuration.
    } | {
        oneofKind: "status";
        /**
         * @generated from protobuf field: Ciot.BleAdvStatus status = 3
         */
        status: BleAdvStatus; // BLE adv interface status.
    } | {
        oneofKind: "request";
        /**
         * @generated from protobuf field: Ciot.BleAdvReq request = 4
         */
        request: BleAdvReq; // BLE adv interface request data.
    } | {
        oneofKind: undefined;
    };
}
/**
 * Possible ble adv states
 *
 * @generated from protobuf enum Ciot.BleAdvState
 */
export enum BleAdvState {
    /**
     * Idle state
     *
     * BLE adv state: idle.
     *
     * @generated from protobuf enum value: BLE_ADV_STATE_IDLE = 0;
     */
    IDLE = 0,
    /**
     * BLE adv state: started and waiting for timeout.
     *
     * @generated from protobuf enum value: BLE_ADV_STATE_STARTED = 1;
     */
    STARTED = 1,
    /**
     * BLE adv state: sending data.
     *
     * @generated from protobuf enum value: BLE_ADV_STATE_SENDING = 2;
     */
    SENDING = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class BleAdvStop$Type extends MessageType<BleAdvStop> {
    constructor() {
        super("Ciot.BleAdvStop", []);
    }
    create(value?: PartialMessage<BleAdvStop>): BleAdvStop {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<BleAdvStop>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BleAdvStop): BleAdvStop {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BleAdvStop, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.BleAdvStop
 */
export const BleAdvStop = new BleAdvStop$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BleAdvCfg$Type extends MessageType<BleAdvCfg> {
    constructor() {
        super("Ciot.BleAdvCfg", [
            { no: 1, name: "interval", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "duration", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "type", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "filter_policy", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "tx_power", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<BleAdvCfg>): BleAdvCfg {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.interval = 0;
        message.duration = 0;
        message.type = 0;
        message.filterPolicy = 0;
        message.txPower = 0;
        if (value !== undefined)
            reflectionMergePartial<BleAdvCfg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BleAdvCfg): BleAdvCfg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 interval */ 1:
                    message.interval = reader.uint32();
                    break;
                case /* uint32 duration */ 2:
                    message.duration = reader.uint32();
                    break;
                case /* uint32 type */ 3:
                    message.type = reader.uint32();
                    break;
                case /* uint32 filter_policy */ 4:
                    message.filterPolicy = reader.uint32();
                    break;
                case /* uint32 tx_power */ 5:
                    message.txPower = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BleAdvCfg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 interval = 1; */
        if (message.interval !== 0)
            writer.tag(1, WireType.Varint).uint32(message.interval);
        /* uint32 duration = 2; */
        if (message.duration !== 0)
            writer.tag(2, WireType.Varint).uint32(message.duration);
        /* uint32 type = 3; */
        if (message.type !== 0)
            writer.tag(3, WireType.Varint).uint32(message.type);
        /* uint32 filter_policy = 4; */
        if (message.filterPolicy !== 0)
            writer.tag(4, WireType.Varint).uint32(message.filterPolicy);
        /* uint32 tx_power = 5; */
        if (message.txPower !== 0)
            writer.tag(5, WireType.Varint).uint32(message.txPower);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.BleAdvCfg
 */
export const BleAdvCfg = new BleAdvCfg$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BleAdvStatus$Type extends MessageType<BleAdvStatus> {
    constructor() {
        super("Ciot.BleAdvStatus", [
            { no: 1, name: "state", kind: "enum", T: () => ["Ciot.BleAdvState", BleAdvState, "BLE_ADV_STATE_"] },
            { no: 2, name: "err_code", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<BleAdvStatus>): BleAdvStatus {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.state = 0;
        message.errCode = 0;
        if (value !== undefined)
            reflectionMergePartial<BleAdvStatus>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BleAdvStatus): BleAdvStatus {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Ciot.BleAdvState state */ 1:
                    message.state = reader.int32();
                    break;
                case /* uint32 err_code */ 2:
                    message.errCode = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BleAdvStatus, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Ciot.BleAdvState state = 1; */
        if (message.state !== 0)
            writer.tag(1, WireType.Varint).int32(message.state);
        /* uint32 err_code = 2; */
        if (message.errCode !== 0)
            writer.tag(2, WireType.Varint).uint32(message.errCode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.BleAdvStatus
 */
export const BleAdvStatus = new BleAdvStatus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BleAdvReq$Type extends MessageType<BleAdvReq> {
    constructor() {
        super("Ciot.BleAdvReq", []);
    }
    create(value?: PartialMessage<BleAdvReq>): BleAdvReq {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<BleAdvReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BleAdvReq): BleAdvReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BleAdvReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.BleAdvReq
 */
export const BleAdvReq = new BleAdvReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BleAdvData$Type extends MessageType<BleAdvData> {
    constructor() {
        super("Ciot.BleAdvData", [
            { no: 1, name: "stop", kind: "message", oneof: "type", T: () => BleAdvStop },
            { no: 2, name: "config", kind: "message", oneof: "type", T: () => BleAdvCfg },
            { no: 3, name: "status", kind: "message", oneof: "type", T: () => BleAdvStatus },
            { no: 4, name: "request", kind: "message", oneof: "type", T: () => BleAdvReq }
        ]);
    }
    create(value?: PartialMessage<BleAdvData>): BleAdvData {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<BleAdvData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BleAdvData): BleAdvData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Ciot.BleAdvStop stop */ 1:
                    message.type = {
                        oneofKind: "stop",
                        stop: BleAdvStop.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).stop)
                    };
                    break;
                case /* Ciot.BleAdvCfg config */ 2:
                    message.type = {
                        oneofKind: "config",
                        config: BleAdvCfg.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).config)
                    };
                    break;
                case /* Ciot.BleAdvStatus status */ 3:
                    message.type = {
                        oneofKind: "status",
                        status: BleAdvStatus.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).status)
                    };
                    break;
                case /* Ciot.BleAdvReq request */ 4:
                    message.type = {
                        oneofKind: "request",
                        request: BleAdvReq.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).request)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BleAdvData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Ciot.BleAdvStop stop = 1; */
        if (message.type.oneofKind === "stop")
            BleAdvStop.internalBinaryWrite(message.type.stop, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* Ciot.BleAdvCfg config = 2; */
        if (message.type.oneofKind === "config")
            BleAdvCfg.internalBinaryWrite(message.type.config, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* Ciot.BleAdvStatus status = 3; */
        if (message.type.oneofKind === "status")
            BleAdvStatus.internalBinaryWrite(message.type.status, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* Ciot.BleAdvReq request = 4; */
        if (message.type.oneofKind === "request")
            BleAdvReq.internalBinaryWrite(message.type.request, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.BleAdvData
 */
export const BleAdvData = new BleAdvData$Type();
