// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "ciot/proto/v2/msg.proto" (package "Ciot", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { MsgData } from "./msg_data";
import { Err } from "./errors";
import { IfaceInfo } from "./iface";
/**
 * Represents an CioT message
 *
 * @generated from protobuf message Ciot.Msg
 */
export interface Msg {
    /**
     * @generated from protobuf field: uint32 id = 1
     */
    id: number; // Message ID.
    /**
     * @generated from protobuf field: Ciot.IfaceInfo iface = 2
     */
    iface?: IfaceInfo; // Interface information.
    /**
     * @generated from protobuf field: Ciot.Err error = 3
     */
    error: Err; // Error code.
    /**
     * @generated from protobuf field: Ciot.MsgData data = 4
     */
    data?: MsgData; // Message data.
}
// @generated message type with reflection information, may provide speed optimized methods
class Msg$Type extends MessageType<Msg> {
    constructor() {
        super("Ciot.Msg", [
            { no: 1, name: "id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "iface", kind: "message", T: () => IfaceInfo },
            { no: 3, name: "error", kind: "enum", T: () => ["Ciot.Err", Err, "ERR_"] },
            { no: 4, name: "data", kind: "message", T: () => MsgData }
        ]);
    }
    create(value?: PartialMessage<Msg>): Msg {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.error = 0;
        if (value !== undefined)
            reflectionMergePartial<Msg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Msg): Msg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                case /* Ciot.IfaceInfo iface */ 2:
                    message.iface = IfaceInfo.internalBinaryRead(reader, reader.uint32(), options, message.iface);
                    break;
                case /* Ciot.Err error */ 3:
                    message.error = reader.int32();
                    break;
                case /* Ciot.MsgData data */ 4:
                    message.data = MsgData.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Msg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint32(message.id);
        /* Ciot.IfaceInfo iface = 2; */
        if (message.iface)
            IfaceInfo.internalBinaryWrite(message.iface, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* Ciot.Err error = 3; */
        if (message.error !== 0)
            writer.tag(3, WireType.Varint).int32(message.error);
        /* Ciot.MsgData data = 4; */
        if (message.data)
            MsgData.internalBinaryWrite(message.data, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.Msg
 */
export const Msg = new Msg$Type();
