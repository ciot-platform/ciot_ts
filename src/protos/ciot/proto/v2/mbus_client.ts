// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "ciot/proto/v2/mbus_client.proto" (package "Ciot", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { MbusFunctionReq } from "./mbus";
import { MbusError } from "./mbus";
import { UartCfg } from "./uart";
/**
 * Message used to stop Modbus client interface
 *
 * @generated from protobuf message Ciot.MbusClientStop
 */
export interface MbusClientStop {
}
/**
 * Message representing Modbus RTU configuration
 *
 * @generated from protobuf message Ciot.MbusClientRtuCfg
 */
export interface MbusClientRtuCfg {
    /**
     * @generated from protobuf field: uint32 server_id = 1
     */
    serverId: number; // Server ID
    /**
     * @generated from protobuf field: Ciot.UartCfg serial_cfg = 2
     */
    serialCfg?: UartCfg; // Serial port config
}
/**
 * Message representing Modbus TCP configuration
 *
 * @generated from protobuf message Ciot.MbusClientTcpCfg
 */
export interface MbusClientTcpCfg {
    /**
     * @generated from protobuf field: bytes ip = 1
     */
    ip: Uint8Array; // Server IP Address (4 bytes)
    /**
     * @generated from protobuf field: uint32 port = 2
     */
    port: number; // Server port
}
/**
 * Message representing Modbus client configuration.
 *
 * @generated from protobuf message Ciot.MbusClientCfg
 */
export interface MbusClientCfg {
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "rtu";
        /**
         * @generated from protobuf field: Ciot.MbusClientRtuCfg rtu = 1
         */
        rtu: MbusClientRtuCfg; // Modbus RTU configuration
    } | {
        oneofKind: "tcp";
        /**
         * @generated from protobuf field: Ciot.MbusClientTcpCfg tcp = 2
         */
        tcp: MbusClientTcpCfg; // Modbus TCP configuration
    } | {
        oneofKind: undefined;
    };
    /**
     * @generated from protobuf field: uint32 timeout = 3
     */
    timeout: number; // Timeout in milliseconds
}
/**
 * Message representing Modbus client status.
 *
 * @generated from protobuf message Ciot.MbusClientStatus
 */
export interface MbusClientStatus {
    /**
     * @generated from protobuf field: Ciot.MbusClientState state = 1
     */
    state: MbusClientState; // State of the Modbus client.
    /**
     * @generated from protobuf field: Ciot.MbusError error = 2
     */
    error: MbusError; // Modbus client error code.
}
/**
 * Message representing an Modbus client request.
 *
 * @generated from protobuf message Ciot.MbusClientReq
 */
export interface MbusClientReq {
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "function";
        /**
         * @generated from protobuf field: Ciot.MbusFunctionReq function = 1
         */
        function: MbusFunctionReq; // Function request
    } | {
        oneofKind: undefined;
    };
}
/**
 * Message representing Modbus client data.
 *
 * @generated from protobuf message Ciot.MbusClientData
 */
export interface MbusClientData {
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "stop";
        /**
         * @generated from protobuf field: Ciot.MbusClientStop stop = 1
         */
        stop: MbusClientStop; // Message used to stop interface.
    } | {
        oneofKind: "config";
        /**
         * @generated from protobuf field: Ciot.MbusClientCfg config = 2
         */
        config: MbusClientCfg; // Message used to get or set interface config.
    } | {
        oneofKind: "status";
        /**
         * @generated from protobuf field: Ciot.MbusClientStatus status = 3
         */
        status: MbusClientStatus; // Message used to get interface status.
    } | {
        oneofKind: "request";
        /**
         * @generated from protobuf field: Ciot.MbusClientReq request = 4
         */
        request: MbusClientReq; // Message used to set an request on the interface.
    } | {
        oneofKind: undefined;
    };
}
/**
 * Enum representing Modbus client states.
 *
 * @generated from protobuf enum Ciot.MbusClientState
 */
export enum MbusClientState {
    /**
     * Modbus client is stopped.
     *
     * @generated from protobuf enum value: MBUS_CLIENT_STATE_STOPPED = 0;
     */
    STOPPED = 0,
    /**
     * Modbus client is started.
     *
     * @generated from protobuf enum value: MBUS_CLIENT_STATE_STARTED = 1;
     */
    STARTED = 1,
    /**
     * Modbus client encountered an error.
     *
     * @generated from protobuf enum value: MBUS_CLIENT_STATE_ERROR = 2;
     */
    ERROR = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class MbusClientStop$Type extends MessageType<MbusClientStop> {
    constructor() {
        super("Ciot.MbusClientStop", []);
    }
    create(value?: PartialMessage<MbusClientStop>): MbusClientStop {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<MbusClientStop>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MbusClientStop): MbusClientStop {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MbusClientStop, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.MbusClientStop
 */
export const MbusClientStop = new MbusClientStop$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MbusClientRtuCfg$Type extends MessageType<MbusClientRtuCfg> {
    constructor() {
        super("Ciot.MbusClientRtuCfg", [
            { no: 1, name: "server_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "serial_cfg", kind: "message", T: () => UartCfg }
        ]);
    }
    create(value?: PartialMessage<MbusClientRtuCfg>): MbusClientRtuCfg {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.serverId = 0;
        if (value !== undefined)
            reflectionMergePartial<MbusClientRtuCfg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MbusClientRtuCfg): MbusClientRtuCfg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 server_id */ 1:
                    message.serverId = reader.uint32();
                    break;
                case /* Ciot.UartCfg serial_cfg */ 2:
                    message.serialCfg = UartCfg.internalBinaryRead(reader, reader.uint32(), options, message.serialCfg);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MbusClientRtuCfg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 server_id = 1; */
        if (message.serverId !== 0)
            writer.tag(1, WireType.Varint).uint32(message.serverId);
        /* Ciot.UartCfg serial_cfg = 2; */
        if (message.serialCfg)
            UartCfg.internalBinaryWrite(message.serialCfg, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.MbusClientRtuCfg
 */
export const MbusClientRtuCfg = new MbusClientRtuCfg$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MbusClientTcpCfg$Type extends MessageType<MbusClientTcpCfg> {
    constructor() {
        super("Ciot.MbusClientTcpCfg", [
            { no: 1, name: "ip", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "port", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MbusClientTcpCfg>): MbusClientTcpCfg {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.ip = new Uint8Array(0);
        message.port = 0;
        if (value !== undefined)
            reflectionMergePartial<MbusClientTcpCfg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MbusClientTcpCfg): MbusClientTcpCfg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes ip */ 1:
                    message.ip = reader.bytes();
                    break;
                case /* uint32 port */ 2:
                    message.port = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MbusClientTcpCfg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes ip = 1; */
        if (message.ip.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.ip);
        /* uint32 port = 2; */
        if (message.port !== 0)
            writer.tag(2, WireType.Varint).uint32(message.port);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.MbusClientTcpCfg
 */
export const MbusClientTcpCfg = new MbusClientTcpCfg$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MbusClientCfg$Type extends MessageType<MbusClientCfg> {
    constructor() {
        super("Ciot.MbusClientCfg", [
            { no: 1, name: "rtu", kind: "message", oneof: "type", T: () => MbusClientRtuCfg },
            { no: 2, name: "tcp", kind: "message", oneof: "type", T: () => MbusClientTcpCfg },
            { no: 3, name: "timeout", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MbusClientCfg>): MbusClientCfg {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = { oneofKind: undefined };
        message.timeout = 0;
        if (value !== undefined)
            reflectionMergePartial<MbusClientCfg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MbusClientCfg): MbusClientCfg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Ciot.MbusClientRtuCfg rtu */ 1:
                    message.type = {
                        oneofKind: "rtu",
                        rtu: MbusClientRtuCfg.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).rtu)
                    };
                    break;
                case /* Ciot.MbusClientTcpCfg tcp */ 2:
                    message.type = {
                        oneofKind: "tcp",
                        tcp: MbusClientTcpCfg.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).tcp)
                    };
                    break;
                case /* uint32 timeout */ 3:
                    message.timeout = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MbusClientCfg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Ciot.MbusClientRtuCfg rtu = 1; */
        if (message.type.oneofKind === "rtu")
            MbusClientRtuCfg.internalBinaryWrite(message.type.rtu, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* Ciot.MbusClientTcpCfg tcp = 2; */
        if (message.type.oneofKind === "tcp")
            MbusClientTcpCfg.internalBinaryWrite(message.type.tcp, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* uint32 timeout = 3; */
        if (message.timeout !== 0)
            writer.tag(3, WireType.Varint).uint32(message.timeout);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.MbusClientCfg
 */
export const MbusClientCfg = new MbusClientCfg$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MbusClientStatus$Type extends MessageType<MbusClientStatus> {
    constructor() {
        super("Ciot.MbusClientStatus", [
            { no: 1, name: "state", kind: "enum", T: () => ["Ciot.MbusClientState", MbusClientState, "MBUS_CLIENT_STATE_"] },
            { no: 2, name: "error", kind: "enum", T: () => ["Ciot.MbusError", MbusError, "MBUS_ERROR_"] }
        ]);
    }
    create(value?: PartialMessage<MbusClientStatus>): MbusClientStatus {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.state = 0;
        message.error = 0;
        if (value !== undefined)
            reflectionMergePartial<MbusClientStatus>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MbusClientStatus): MbusClientStatus {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Ciot.MbusClientState state */ 1:
                    message.state = reader.int32();
                    break;
                case /* Ciot.MbusError error */ 2:
                    message.error = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MbusClientStatus, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Ciot.MbusClientState state = 1; */
        if (message.state !== 0)
            writer.tag(1, WireType.Varint).int32(message.state);
        /* Ciot.MbusError error = 2; */
        if (message.error !== 0)
            writer.tag(2, WireType.Varint).int32(message.error);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.MbusClientStatus
 */
export const MbusClientStatus = new MbusClientStatus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MbusClientReq$Type extends MessageType<MbusClientReq> {
    constructor() {
        super("Ciot.MbusClientReq", [
            { no: 1, name: "function", kind: "message", oneof: "type", T: () => MbusFunctionReq }
        ]);
    }
    create(value?: PartialMessage<MbusClientReq>): MbusClientReq {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<MbusClientReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MbusClientReq): MbusClientReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Ciot.MbusFunctionReq function */ 1:
                    message.type = {
                        oneofKind: "function",
                        function: MbusFunctionReq.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).function)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MbusClientReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Ciot.MbusFunctionReq function = 1; */
        if (message.type.oneofKind === "function")
            MbusFunctionReq.internalBinaryWrite(message.type.function, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.MbusClientReq
 */
export const MbusClientReq = new MbusClientReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MbusClientData$Type extends MessageType<MbusClientData> {
    constructor() {
        super("Ciot.MbusClientData", [
            { no: 1, name: "stop", kind: "message", oneof: "type", T: () => MbusClientStop },
            { no: 2, name: "config", kind: "message", oneof: "type", T: () => MbusClientCfg },
            { no: 3, name: "status", kind: "message", oneof: "type", T: () => MbusClientStatus },
            { no: 4, name: "request", kind: "message", oneof: "type", T: () => MbusClientReq }
        ]);
    }
    create(value?: PartialMessage<MbusClientData>): MbusClientData {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<MbusClientData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MbusClientData): MbusClientData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Ciot.MbusClientStop stop */ 1:
                    message.type = {
                        oneofKind: "stop",
                        stop: MbusClientStop.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).stop)
                    };
                    break;
                case /* Ciot.MbusClientCfg config */ 2:
                    message.type = {
                        oneofKind: "config",
                        config: MbusClientCfg.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).config)
                    };
                    break;
                case /* Ciot.MbusClientStatus status */ 3:
                    message.type = {
                        oneofKind: "status",
                        status: MbusClientStatus.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).status)
                    };
                    break;
                case /* Ciot.MbusClientReq request */ 4:
                    message.type = {
                        oneofKind: "request",
                        request: MbusClientReq.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).request)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MbusClientData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Ciot.MbusClientStop stop = 1; */
        if (message.type.oneofKind === "stop")
            MbusClientStop.internalBinaryWrite(message.type.stop, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* Ciot.MbusClientCfg config = 2; */
        if (message.type.oneofKind === "config")
            MbusClientCfg.internalBinaryWrite(message.type.config, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* Ciot.MbusClientStatus status = 3; */
        if (message.type.oneofKind === "status")
            MbusClientStatus.internalBinaryWrite(message.type.status, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* Ciot.MbusClientReq request = 4; */
        if (message.type.oneofKind === "request")
            MbusClientReq.internalBinaryWrite(message.type.request, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ciot.MbusClientData
 */
export const MbusClientData = new MbusClientData$Type();
